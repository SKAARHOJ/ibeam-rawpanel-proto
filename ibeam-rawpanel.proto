syntax = "proto3";
package ibeam_rawpanel;

option go_package = "./ibeam_rawpanel;ibeam_rawpanel";


// Generally, if a field of another message type is not nil
// that whole message with all it's fields (except other messages) shall be accepted as values (including default false/zeros)

// Wrapper for all incoming messages (Incoming = to Panel from System)
message InboundMessage {
    enum FlowMsg {
        NONE = 0;
        PING = 1;   // "ping",
        ACK = 2;    // "ack",
        NACK = 3;   // "nack",
    }
    FlowMsg FlowMessage = 1;    // Only non-zero values are acted upon

    Command Command = 2;

    repeated HWCState States = 8;
}

// All the bools in the Command section is like a trigger when true
message Command {
    bool ActivatePanel = 1; // "ActivePanel=1",
    bool SendPanelInfo = 2; // "list",
    bool SendPanelTopology = 3; // "PanelTopology?",
    bool ReportHWCavailability = 4; // "map" -> "avail"
    bool SendBurninProfile = 6; // Return the burnin json profiles of a controller (Only for ibeam panels)

    bool ClearAll = 10; // "Clear",
    bool ClearLEDs = 11; // "ClearLEDs",
    bool ClearDisplays = 12;    // "ClearDisplays",
    
    bool WakeUp = 5;   // "WakeUp!",
    
    bool GetSleepTimeout = 20;  // "SleepTimer?",
    SleepTimeout SetSleepTimeout = 21;  // SleepTimer=xx
    SleepMode SetSleepMode = 28;  // SleepMode=xx
    SleepScreenSaver SetSleepScreenSaver = 29;  // SleepScreenSaver=xx

    WebserverState SetWebserverEnabled = 22;    // Webserver=x

    Brightness PanelBrightness = 23;        // PanelBrightness=x,y

    HeartBeatTimer SetHeartBeatTimer = 24;  // HeartBeatTimer=
    bool GetConnections = 25;  // "Connections?",
    DimmedGain SetDimmedGain = 26;  // DimmedGain=
    bool GetRunTimeStats = 27;  // "RunTimeStats?"

    PublishSystemStat PublishSystemStat = 30;
    LoadCPU LoadCPU = 31;
    bool Reboot = 32;   // "Reboot",
}
message SleepTimeout {
    uint32 Value = 1;
}
message SleepMode {
    enum SlpMode {
        FIREWORKS = 0;
        OFF = 1;
    }
    SlpMode Mode = 1;
}
message SleepScreenSaver {
    enum SlpScrSaver {
        WAKEUPONKEYPRESS = 0;   // "Wake Up On Key Press" message (default)
        SHEEPANDGOATS = 1;  // Classic UniSketch funtime screen saver, counting sheep and goats
        SAVETHEOLEDS = 2;   // "Save The Oleds" message
        JUSTDIMMED = 3; // keeps content, dims buttons and panel
    }
    SlpScrSaver Type = 1;
}
message WebserverState {
    bool Enabled = 1;
}
message HeartBeatTimer {
    uint32 Value = 1;
}
message DimmedGain {
    uint32 Value = 1;
}
message Brightness {
    uint32 OLEDs = 1;
    uint32 LEDs = 2;
}

message PublishSystemStat {
    uint32 PeriodSec = 2; // Disabled when 0
}

message LoadCPU {
    enum LevelE {
        OFF = 0;
        ON_1CORE = 1;
        ON_2CORES = 2;
        ON_3CORES = 3;
        ON_4CORES = 4;
    }
    LevelE Level = 1;
}

message HWCState {
    repeated uint32 HWCIDs = 1;

    HWCMode HWCMode = 2;                // HWC#xx=yy
    HWCColor HWCColor = 3;              // HWCc#xx=yy
    HWCExtended HWCExtended = 4;        // HWCx#xx=yy
    HWCText HWCText = 5;                // HWCt#xx=yy
    HWCGfx HWCGfx = 6;                  // HWCg#xx=yy   + HWCgRGB#xx=yy+ HWCgGray#xx=yy

    PublishRawADCValues PublishRawADCValues = 7;
    HWCGfxConverter HWCGfxConverter = 8; 
}

message PublishRawADCValues {
    bool Enabled = 1;
}

// HWC#xx=yy
// Changes from UniSketch TCP Client/RawPanel 1.0:
// Blink bit 4 is left out in v2.0 - legacy
message HWCMode {
    enum StateE {
        OFF = 0;
        ON_YELLOW = 1;  // Actually shall be Amber
        ON_RED = 2;
        ON_GREEN = 3;
        ON = 4;
        DIMMED = 5;
      }
    StateE State = 2;           // Intensity for LEDs, mixed up with the three special colors red, green, amber (full on)
    bool Output = 4;            // Digital output on/off (like relays). This should (probably) always follow State values 1-4 = true, 0 and 5 (anything else) = false
    uint32 BlinkPattern = 3;    // Blink pattern, 4 bits
}

// Extended state of hardware component
message HWCExtended {
    enum InterpretationE {
        NONE = 0;
        STRENGTH = 1;
        STEPS = 3;
        VU = 4;
        FADER = 5;
        BUZZER = 6;
      }
    InterpretationE Interpretation = 2;      // Value type
    uint32 Value = 3;    // Value, 10 bits
}

// Color. 
// Could have used "oneof" but disliked because of the extra convolution
// colorRGB takes precedence over colorIndex
message HWCColor {
    // One of:
    ColorRGB ColorRGB = 1;
    ColorIndex ColorIndex = 2;
}

// Color, but used in HWCText. Same as HWCColor
message Color {
    // One of:
    ColorRGB ColorRGB = 1;
    ColorIndex ColorIndex = 2;
}

// Color as RGB (3x2 bits)
message ColorRGB {
    uint32 Red = 1;
    uint32 Green = 2;
    uint32 Blue = 3;
}

// Color as a name/index:
message ColorIndex {
    enum Colors {
        DEFAULT = 0;
        OFF = 1;
        WHITE = 2;
        WARM = 3;
        RED = 4;
        ROSE = 5;
        PINK = 6;
        PURPLE = 7;
        AMBER = 8;
        YELLOW = 9;
        DARKBLUE = 10;
        BLUE = 11;
        ICE = 12;
        CYAN = 13;
        SPRING = 14;
        GREEN = 15;
        MINT = 16;
        LIGHTGRAY = 17; // For displays / backgrounds
        DARKGRAY = 18; // For displays / backgrounds
    }

    Colors Index = 1;
}

// Text
message HWCText {
    sint32 IntegerValue = 2;    // Index 0
    enum FormattingE {
        FMT_INTEGER = 0;
        FMT_FLOAT_2DEZ = 1; 
        FMT_PERCENTAGE = 2;
        FMT_DB = 3;
        FMT_FRAMES = 4;
        FMT_ONEOVERX = 5;
        FMT_KELVIN = 6;
        FMT_HIDE = 7;
        FMT_FLOAT_X_XXX = 8;
        FMT_FLOAT_XX_XX = 9;
        FMT_ONELINE = 10;
        FMT_TWOLINES = 11;
        FMT_FLOAT_XXX_X = 12;
    }
    FormattingE Formatting = 3;    // Index 1
    
    enum StateIconE {
        SI_NONE = 0;
        SI_FINE = 1;
        SI_LOCK = 2;
        SI_NOACCESS = 3;
    }
    StateIconE StateIcon = 5;       // Index 2

    enum ModifierIconE {
        MI_NONE = 0;
        MI_CYCLE = 1;
        MI_DOWN = 2;
        MI_UP = 3;
        MI_HOLD = 4;
        MI_TOGGLE = 5;
        MI_OK = 6;
        MI_QUESTION = 7;
    }
    ModifierIconE ModifierIcon = 6;       // Index 2

    string Title = 7;                   // Index 3
    bool SolidHeaderBar = 8;            // Index 4
    string Textline1 = 9;               // Index 5
    string Textline2 = 10;              // Index 6
    sint32 IntegerValue2 = 11;            // Index 7

    enum PairModeE {
        PM_OFF = 0;
        PM_UNMARKED = 1;
        PM_UPPER_MARKED = 2;
        PM_LOWER_MARKED = 3;
        PM_BOTH_MARKED = 4;
    }
    PairModeE PairMode = 12;              // Index 8

    message ScaleM {
        enum ScaleTypeE {
            ST_OFF = 0;
            ST_STRENGTH = 1;
            ST_CENTER_MARKER = 2;
            ST_CENTER_BAR = 3;
        }
        ScaleTypeE ScaleType = 1;              
        sint32 RangeLow = 2;
        sint32 RangeHigh = 3;
        sint32 LimitLow = 4;
        sint32 LimitHigh = 5;
    }
    ScaleM Scale = 13;         // Index 9-13
        // 14 is ignored

    message TextStyle {
        message Font {
            enum FontFaceE {
                ST_DEFAULT = 0;
                ST_BOLD = 1;
                ST_TINY = 2;
            }
            FontFaceE FontFace = 1;              
            uint32 TextHeight = 2;
            uint32 TextWidth = 3;
        }
        Font TitleFont = 1;        
        Font TextFont = 2;         
        bool FixedWidth = 3;
        uint32 TitleBarPadding = 4;
        uint32 ExtraCharacterSpacing = 5;
        uint32 UnformattedFontSize = 6;
    }
    TextStyle TextStyling = 14;     // Index 15-17
    
    bool Inverted = 15;             // Index 18
    Color PixelColor = 16;          // Index 19
    Color BackgroundColor = 17;     // Index 20

    //bool Convert = 18;  // If set, rawpanelhelpers will try to convert to image and in the process check if the title and textline 1 + 2 contains UTF8 in which case 
}

// Graphics
message HWCGfx {
    enum ImageTypeE {
        MONO = 0;
        RGB16bit = 1;
        Gray4bit = 2;
    }
    ImageTypeE ImageType = 1;    
    uint32 W = 2;       // Must always be set (and match size of image in ImageData)
    uint32 H = 3;       // Must always be set (and match size of image in ImageData)

    // TODO: Break this optional parameter out into separate message:
    bool XYoffset = 4;  // Enables whether the X/Y offset is taken into account (default is to center the image)
    uint32 X = 5;
    uint32 Y = 6;

    bytes ImageData = 16;
}

// 
message HWCGfxConverter {
    enum ImageTypeE {
        MONO = 0;
        RGB16bit = 1;
        Gray4bit = 2;
    }
    ImageTypeE ImageType = 1;    
    uint32 W = 2;       
    uint32 H = 3;       

    bytes ImageData = 16;

    enum ScalingE {
        NONE = 0;
        FILL = 1;   // 
        FIT = 2;    // 
        STRETCH = 3;   // 
    }
    ScalingE Scaling = 18;
}







// Wrapper for all outgoing messages (Outgoing = from Panel to System)
message OutboundMessage {
    enum FlowMsg {
        NONE = 0;
        PING = 1;   // "ping",
        ACK = 2;    // "ack",
        NACK = 3;   // "nack",
        BSY = 4;    // "BSY",
        RDY = 5;    // "RDY",

        HELLO = 100;    // Hi there, I'm a panel!
    }
    FlowMsg FlowMessage = 1;

    map<uint32, uint32> HWCavailability = 2;

    PanelInfo PanelInfo = 4;
    PanelTopology PanelTopology = 5;
    BurninProfile BurninProfile = 9;
    
    SleepTimeout SleepTimeout = 6;
    SleepState SleepState = 7;

    BusStatus BusStatus = 10;

    repeated HWCEvent Events = 8;

    Connections Connections = 20;
    HeartBeatTimer HeartBeatTimer = 21;
    DimmedGain DimmedGain = 22;
    RunTimeStats RunTimeStats = 23;
    SystemStat SysStat = 24;

    Message Message = 30;
    Message ErrorMessage = 31;
}

message SleepState {
    bool IsSleeping = 1;
}

message Connections {
    repeated string Connection = 1;
}

message Message {
    string Message = 1;
}

message RunTimeStats {
    uint32 BootsCount = 1;
    uint32 TotalUptime = 2;
    uint32 SessionUptime = 3;
    uint32 ScreenSaveOnTime = 4;
}

message BusStatus {
    bool Fault = 1;
}

message HWCEvent {
    uint32 HWCID = 1;
    uint32 Timestamp = 6;   // Systems time in milliseconds the moment of the trigger

    // one of:
    BinaryEvent Binary = 2;
    PulsedEvent Pulsed = 3;
    AbsoluteEvent Absolute = 4;
    SpeedEvent Speed = 5;
    RawAnalogEvent RawAnalog = 7;
}

message BinaryEvent {
    enum EdgeID {
        UNKNOWN = 0;
        TOP = 1;
        LEFT = 2;
        BOTTOM = 4;
        RIGHT = 8;
        ENCODER = 16;
    }

    bool Pressed = 1;
    EdgeID Edge = 2;
}

message PulsedEvent {
    sint32 Value = 1;
}

message AbsoluteEvent {
    uint32 Value = 1;
    uint32 PrevValue = 2;   // Can hold previously sent value
}

message SpeedEvent {
    sint32 Value = 1;
    sint32 PrevValue = 2;   // Can hold previously sent value
}

message RawAnalogEvent {
    uint32 Value = 1;
}

message SystemStat {
    uint32 CPUUsage = 1; // 0..100%
    float CPUTemp = 2; // degrees Celsius
    float ExtTemp = 3; // degrees Celsius, external sensor (-100 if not available)
    float CPUVoltage = 4; // CPU voltage
    sint32 CPUFreqCurrent = 5; // CPU current frequency (-1 if not available) 
    sint32 CPUFreqMin = 6; // CPU min frequency (-1 if not available)
    sint32 CPUFreqMax = 7; // CPU max frequency (-1 if not available)
    sint32 MemTotal = 8; // total memmory in kB 
    sint32 MemFree = 9; // free memmory 
    sint32 MemAvailable = 10; // available memmory
    sint32 MemBuffers = 11; // buffered
    sint32 MemCached = 12; // cached
    bool UnderVoltageNow = 13; // Under voltage condition detected now, under-voltage occurs when voltage drops below 4.63V. The Pi is throttled
    bool UnderVoltage = 14; //  Under voltage condition detected since boot
    bool FreqCapNow = 15; // Frequency cap reached now , arm frequency capped occurs with temp > 80'C
    bool FreqCap = 16; // Frequency cap reached since boot 
    bool ThrottledNow = 17; // CPU Throttling now , over-temperature occurs with temp > 85'C. The Pi is throttled
    bool Throttled = 18; // CPU Throttled since boot
    bool SoftTempLimitNow = 19; //
    bool SoftTempLimit = 20; //
}

message PanelInfo { //  Values only used if not empty
    string Model = 1;
    string Serial = 2;
    string Name = 3;
    string SoftwareVersion = 4;
    string Platform = 5;
    bool BluePillReady = 6;
    uint32 MaxClients = 7;
    repeated string LockedToIPs = 8;
}

message PanelTopology { //  Values only used if not empty
    string Svgbase = 1;
    string Json = 2;
}

message BurninProfile { //  Values only used if not empty
    string Json = 1;
}
