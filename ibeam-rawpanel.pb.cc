// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibeam-rawpanel.proto

#include "ibeam-rawpanel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsoluteEvent_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryEvent_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brightness_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BurninProfile_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Color_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorIndex_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorRGB_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Command_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HWCColor_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_HWCEvent_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCExtended_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCGfx_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCMode_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_HWCState_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HWCText_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCText_ScaleM_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HWCText_TextStyle_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCText_TextStyle_Font_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutboundMessage_HWCavailabilityEntry_DoNotUse_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PanelInfo_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PanelTopology_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishRawADCValues_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishSystemStat_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PulsedEvent_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawAnalogEvent_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SleepState_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SleepTimeout_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedEvent_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemStat_ibeam_2drawpanel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ibeam_2drawpanel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebserverState_ibeam_2drawpanel_2eproto;
namespace ibeam_rawpanel {
class InboundMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InboundMessage> _instance;
} _InboundMessage_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
class SleepTimeoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SleepTimeout> _instance;
} _SleepTimeout_default_instance_;
class WebserverStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebserverState> _instance;
} _WebserverState_default_instance_;
class BrightnessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brightness> _instance;
} _Brightness_default_instance_;
class PublishSystemStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishSystemStat> _instance;
} _PublishSystemStat_default_instance_;
class HWCStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCState> _instance;
} _HWCState_default_instance_;
class PublishRawADCValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishRawADCValues> _instance;
} _PublishRawADCValues_default_instance_;
class HWCModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCMode> _instance;
} _HWCMode_default_instance_;
class HWCExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCExtended> _instance;
} _HWCExtended_default_instance_;
class HWCColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCColor> _instance;
} _HWCColor_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class ColorRGBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorRGB> _instance;
} _ColorRGB_default_instance_;
class ColorIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorIndex> _instance;
} _ColorIndex_default_instance_;
class HWCText_ScaleMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCText_ScaleM> _instance;
} _HWCText_ScaleM_default_instance_;
class HWCText_TextStyle_FontDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCText_TextStyle_Font> _instance;
} _HWCText_TextStyle_Font_default_instance_;
class HWCText_TextStyleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCText_TextStyle> _instance;
} _HWCText_TextStyle_default_instance_;
class HWCTextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCText> _instance;
} _HWCText_default_instance_;
class HWCGfxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCGfx> _instance;
} _HWCGfx_default_instance_;
class ImgConvertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImgConvert> _instance;
} _ImgConvert_default_instance_;
class OutboundMessage_HWCavailabilityEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutboundMessage_HWCavailabilityEntry_DoNotUse> _instance;
} _OutboundMessage_HWCavailabilityEntry_DoNotUse_default_instance_;
class OutboundMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutboundMessage> _instance;
} _OutboundMessage_default_instance_;
class SleepStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SleepState> _instance;
} _SleepState_default_instance_;
class HWCEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HWCEvent> _instance;
} _HWCEvent_default_instance_;
class BinaryEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryEvent> _instance;
} _BinaryEvent_default_instance_;
class PulsedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulsedEvent> _instance;
} _PulsedEvent_default_instance_;
class AbsoluteEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbsoluteEvent> _instance;
} _AbsoluteEvent_default_instance_;
class SpeedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedEvent> _instance;
} _SpeedEvent_default_instance_;
class RawAnalogEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawAnalogEvent> _instance;
} _RawAnalogEvent_default_instance_;
class SystemStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemStat> _instance;
} _SystemStat_default_instance_;
class PanelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PanelInfo> _instance;
} _PanelInfo_default_instance_;
class PanelTopologyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PanelTopology> _instance;
} _PanelTopology_default_instance_;
class BurninProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BurninProfile> _instance;
} _BurninProfile_default_instance_;
}  // namespace ibeam_rawpanel
static void InitDefaultsscc_info_AbsoluteEvent_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_AbsoluteEvent_default_instance_;
    new (ptr) ::ibeam_rawpanel::AbsoluteEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsoluteEvent_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbsoluteEvent_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_BinaryEvent_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_BinaryEvent_default_instance_;
    new (ptr) ::ibeam_rawpanel::BinaryEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryEvent_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BinaryEvent_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_Brightness_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_Brightness_default_instance_;
    new (ptr) ::ibeam_rawpanel::Brightness();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brightness_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brightness_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_BurninProfile_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_BurninProfile_default_instance_;
    new (ptr) ::ibeam_rawpanel::BurninProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BurninProfile_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BurninProfile_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_Color_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_Color_default_instance_;
    new (ptr) ::ibeam_rawpanel::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Color_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Color_ibeam_2drawpanel_2eproto}, {
      &scc_info_ColorRGB_ibeam_2drawpanel_2eproto.base,
      &scc_info_ColorIndex_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_ColorIndex_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_ColorIndex_default_instance_;
    new (ptr) ::ibeam_rawpanel::ColorIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorIndex_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorIndex_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_ColorRGB_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_ColorRGB_default_instance_;
    new (ptr) ::ibeam_rawpanel::ColorRGB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorRGB_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorRGB_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_Command_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_Command_default_instance_;
    new (ptr) ::ibeam_rawpanel::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Command_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Command_ibeam_2drawpanel_2eproto}, {
      &scc_info_SleepTimeout_ibeam_2drawpanel_2eproto.base,
      &scc_info_WebserverState_ibeam_2drawpanel_2eproto.base,
      &scc_info_Brightness_ibeam_2drawpanel_2eproto.base,
      &scc_info_PublishSystemStat_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_HWCColor_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCColor_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HWCColor_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HWCColor_ibeam_2drawpanel_2eproto}, {
      &scc_info_ColorRGB_ibeam_2drawpanel_2eproto.base,
      &scc_info_ColorIndex_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_HWCEvent_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCEvent_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_HWCEvent_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_HWCEvent_ibeam_2drawpanel_2eproto}, {
      &scc_info_BinaryEvent_ibeam_2drawpanel_2eproto.base,
      &scc_info_PulsedEvent_ibeam_2drawpanel_2eproto.base,
      &scc_info_AbsoluteEvent_ibeam_2drawpanel_2eproto.base,
      &scc_info_SpeedEvent_ibeam_2drawpanel_2eproto.base,
      &scc_info_RawAnalogEvent_ibeam_2drawpanel_2eproto.base,
      &scc_info_SystemStat_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_HWCExtended_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCExtended_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCExtended_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HWCExtended_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_HWCGfx_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCGfx_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCGfx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCGfx_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HWCGfx_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_HWCMode_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCMode_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCMode_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HWCMode_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_HWCState_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCState_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_HWCState_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_HWCState_ibeam_2drawpanel_2eproto}, {
      &scc_info_HWCMode_ibeam_2drawpanel_2eproto.base,
      &scc_info_HWCColor_ibeam_2drawpanel_2eproto.base,
      &scc_info_HWCExtended_ibeam_2drawpanel_2eproto.base,
      &scc_info_HWCText_ibeam_2drawpanel_2eproto.base,
      &scc_info_HWCGfx_ibeam_2drawpanel_2eproto.base,
      &scc_info_PublishRawADCValues_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_HWCText_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCText_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCText();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HWCText_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HWCText_ibeam_2drawpanel_2eproto}, {
      &scc_info_HWCText_ScaleM_ibeam_2drawpanel_2eproto.base,
      &scc_info_HWCText_TextStyle_ibeam_2drawpanel_2eproto.base,
      &scc_info_Color_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_HWCText_ScaleM_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCText_ScaleM_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCText_ScaleM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCText_ScaleM_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HWCText_ScaleM_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_HWCText_TextStyle_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCText_TextStyle_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCText_TextStyle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HWCText_TextStyle_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HWCText_TextStyle_ibeam_2drawpanel_2eproto}, {
      &scc_info_HWCText_TextStyle_Font_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_HWCText_TextStyle_Font_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_HWCText_TextStyle_Font_default_instance_;
    new (ptr) ::ibeam_rawpanel::HWCText_TextStyle_Font();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HWCText_TextStyle_Font_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HWCText_TextStyle_Font_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_ImgConvert_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_ImgConvert_default_instance_;
    new (ptr) ::ibeam_rawpanel::ImgConvert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImgConvert_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImgConvert_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_InboundMessage_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_InboundMessage_default_instance_;
    new (ptr) ::ibeam_rawpanel::InboundMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InboundMessage_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InboundMessage_ibeam_2drawpanel_2eproto}, {
      &scc_info_Command_ibeam_2drawpanel_2eproto.base,
      &scc_info_HWCState_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_OutboundMessage_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_OutboundMessage_default_instance_;
    new (ptr) ::ibeam_rawpanel::OutboundMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_OutboundMessage_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_OutboundMessage_ibeam_2drawpanel_2eproto}, {
      &scc_info_OutboundMessage_HWCavailabilityEntry_DoNotUse_ibeam_2drawpanel_2eproto.base,
      &scc_info_PanelInfo_ibeam_2drawpanel_2eproto.base,
      &scc_info_PanelTopology_ibeam_2drawpanel_2eproto.base,
      &scc_info_BurninProfile_ibeam_2drawpanel_2eproto.base,
      &scc_info_SleepTimeout_ibeam_2drawpanel_2eproto.base,
      &scc_info_SleepState_ibeam_2drawpanel_2eproto.base,
      &scc_info_HWCEvent_ibeam_2drawpanel_2eproto.base,}};

static void InitDefaultsscc_info_OutboundMessage_HWCavailabilityEntry_DoNotUse_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_OutboundMessage_HWCavailabilityEntry_DoNotUse_default_instance_;
    new (ptr) ::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutboundMessage_HWCavailabilityEntry_DoNotUse_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutboundMessage_HWCavailabilityEntry_DoNotUse_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_PanelInfo_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_PanelInfo_default_instance_;
    new (ptr) ::ibeam_rawpanel::PanelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PanelInfo_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PanelInfo_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_PanelTopology_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_PanelTopology_default_instance_;
    new (ptr) ::ibeam_rawpanel::PanelTopology();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PanelTopology_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PanelTopology_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_PublishRawADCValues_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_PublishRawADCValues_default_instance_;
    new (ptr) ::ibeam_rawpanel::PublishRawADCValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishRawADCValues_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublishRawADCValues_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_PublishSystemStat_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_PublishSystemStat_default_instance_;
    new (ptr) ::ibeam_rawpanel::PublishSystemStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishSystemStat_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublishSystemStat_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_PulsedEvent_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_PulsedEvent_default_instance_;
    new (ptr) ::ibeam_rawpanel::PulsedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PulsedEvent_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PulsedEvent_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_RawAnalogEvent_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_RawAnalogEvent_default_instance_;
    new (ptr) ::ibeam_rawpanel::RawAnalogEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawAnalogEvent_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RawAnalogEvent_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_SleepState_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_SleepState_default_instance_;
    new (ptr) ::ibeam_rawpanel::SleepState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SleepState_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SleepState_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_SleepTimeout_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_SleepTimeout_default_instance_;
    new (ptr) ::ibeam_rawpanel::SleepTimeout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SleepTimeout_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SleepTimeout_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_SpeedEvent_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_SpeedEvent_default_instance_;
    new (ptr) ::ibeam_rawpanel::SpeedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedEvent_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedEvent_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_SystemStat_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_SystemStat_default_instance_;
    new (ptr) ::ibeam_rawpanel::SystemStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemStat_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemStat_ibeam_2drawpanel_2eproto}, {}};

static void InitDefaultsscc_info_WebserverState_ibeam_2drawpanel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ibeam_rawpanel::_WebserverState_default_instance_;
    new (ptr) ::ibeam_rawpanel::WebserverState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebserverState_ibeam_2drawpanel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WebserverState_ibeam_2drawpanel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ibeam_2drawpanel_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ibeam_2drawpanel_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ibeam_2drawpanel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ibeam_2drawpanel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::InboundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::InboundMessage, flowmessage_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::InboundMessage, command_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::InboundMessage, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, activatepanel_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, sendpanelinfo_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, sendpaneltopology_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, reporthwcavailability_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, sendburninprofile_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, clearall_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, clearleds_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, cleardisplays_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, wakeup_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, getsleeptimeout_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, setsleeptimeout_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, setwebserverenabled_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, panelbrightness_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Command, publishsystemstat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SleepTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SleepTimeout, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::WebserverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::WebserverState, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Brightness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Brightness, oleds_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Brightness, leds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PublishSystemStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PublishSystemStat, enabled_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PublishSystemStat, periodsec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCState, hwcids_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCState, hwcmode_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCState, hwccolor_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCState, hwcextended_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCState, hwctext_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCState, hwcgfx_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCState, publishrawadcvalues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PublishRawADCValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PublishRawADCValues, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCMode, state_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCMode, output_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCMode, blinkpattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCExtended, interpretation_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCExtended, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCColor, colorrgb_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCColor, colorindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Color, colorrgb_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::Color, colorindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ColorRGB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ColorRGB, red_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ColorRGB, green_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ColorRGB, blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ColorIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ColorIndex, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_ScaleM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_ScaleM, scaletype_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_ScaleM, rangelow_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_ScaleM, rangehigh_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_ScaleM, limitlow_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_ScaleM, limithigh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle_Font, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle_Font, fontface_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle_Font, textheight_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle_Font, textwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle, titlefont_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle, textfont_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle, fixedwidth_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle, titlebarpadding_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle, extracharacterspacing_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText_TextStyle, unformattedfontsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, integervalue_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, formatting_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, stateicon_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, modifiericon_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, title_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, solidheaderbar_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, textline1_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, textline2_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, integervalue2_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, pairmode_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, scale_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, textstyling_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, inverted_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, pixelcolor_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCText, backgroundcolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCGfx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCGfx, imagetype_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCGfx, w_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCGfx, h_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCGfx, xyoffset_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCGfx, x_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCGfx, y_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCGfx, imagedata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ImgConvert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ImgConvert, filetype_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ImgConvert, scaling_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::ImgConvert, grayscale_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, flowmessage_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, hwcavailability_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, panelinfo_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, paneltopology_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, burninprofile_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, sleeptimeout_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, sleepstate_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::OutboundMessage, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SleepState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SleepState, issleeping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, hwcid_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, binary_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, pulsed_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, absolute_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, speed_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, rawanalog_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::HWCEvent, sysstat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::BinaryEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::BinaryEvent, pressed_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::BinaryEvent, edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PulsedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PulsedEvent, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::AbsoluteEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::AbsoluteEvent, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SpeedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SpeedEvent, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::RawAnalogEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::RawAnalogEvent, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SystemStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SystemStat, cpuusage_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SystemStat, cputemp_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::SystemStat, exttemp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelInfo, model_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelInfo, serial_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelInfo, name_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelInfo, softwareversion_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelInfo, platform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelTopology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelTopology, svgbase_),
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::PanelTopology, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::BurninProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ibeam_rawpanel::BurninProfile, json_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ibeam_rawpanel::InboundMessage)},
  { 8, -1, sizeof(::ibeam_rawpanel::Command)},
  { 27, -1, sizeof(::ibeam_rawpanel::SleepTimeout)},
  { 33, -1, sizeof(::ibeam_rawpanel::WebserverState)},
  { 39, -1, sizeof(::ibeam_rawpanel::Brightness)},
  { 46, -1, sizeof(::ibeam_rawpanel::PublishSystemStat)},
  { 53, -1, sizeof(::ibeam_rawpanel::HWCState)},
  { 65, -1, sizeof(::ibeam_rawpanel::PublishRawADCValues)},
  { 71, -1, sizeof(::ibeam_rawpanel::HWCMode)},
  { 79, -1, sizeof(::ibeam_rawpanel::HWCExtended)},
  { 86, -1, sizeof(::ibeam_rawpanel::HWCColor)},
  { 93, -1, sizeof(::ibeam_rawpanel::Color)},
  { 100, -1, sizeof(::ibeam_rawpanel::ColorRGB)},
  { 108, -1, sizeof(::ibeam_rawpanel::ColorIndex)},
  { 114, -1, sizeof(::ibeam_rawpanel::HWCText_ScaleM)},
  { 124, -1, sizeof(::ibeam_rawpanel::HWCText_TextStyle_Font)},
  { 132, -1, sizeof(::ibeam_rawpanel::HWCText_TextStyle)},
  { 143, -1, sizeof(::ibeam_rawpanel::HWCText)},
  { 163, -1, sizeof(::ibeam_rawpanel::HWCGfx)},
  { 175, -1, sizeof(::ibeam_rawpanel::ImgConvert)},
  { 183, 190, sizeof(::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse)},
  { 192, -1, sizeof(::ibeam_rawpanel::OutboundMessage)},
  { 205, -1, sizeof(::ibeam_rawpanel::SleepState)},
  { 211, -1, sizeof(::ibeam_rawpanel::HWCEvent)},
  { 224, -1, sizeof(::ibeam_rawpanel::BinaryEvent)},
  { 231, -1, sizeof(::ibeam_rawpanel::PulsedEvent)},
  { 237, -1, sizeof(::ibeam_rawpanel::AbsoluteEvent)},
  { 243, -1, sizeof(::ibeam_rawpanel::SpeedEvent)},
  { 249, -1, sizeof(::ibeam_rawpanel::RawAnalogEvent)},
  { 255, -1, sizeof(::ibeam_rawpanel::SystemStat)},
  { 263, -1, sizeof(::ibeam_rawpanel::PanelInfo)},
  { 273, -1, sizeof(::ibeam_rawpanel::PanelTopology)},
  { 280, -1, sizeof(::ibeam_rawpanel::BurninProfile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_InboundMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_SleepTimeout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_WebserverState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_Brightness_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_PublishSystemStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_PublishRawADCValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_ColorRGB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_ColorIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCText_ScaleM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCText_TextStyle_Font_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCText_TextStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCGfx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_ImgConvert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_OutboundMessage_HWCavailabilityEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_OutboundMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_SleepState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_HWCEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_BinaryEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_PulsedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_AbsoluteEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_SpeedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_RawAnalogEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_SystemStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_PanelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_PanelTopology_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibeam_rawpanel::_BurninProfile_default_instance_),
};

const char descriptor_table_protodef_ibeam_2drawpanel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ibeam-rawpanel.proto\022\016ibeam_rawpanel\"\323"
  "\001\n\016InboundMessage\022;\n\013FlowMessage\030\001 \001(\0162&"
  ".ibeam_rawpanel.InboundMessage.FlowMsg\022("
  "\n\007Command\030\002 \001(\0132\027.ibeam_rawpanel.Command"
  "\022(\n\006States\030\010 \003(\0132\030.ibeam_rawpanel.HWCSta"
  "te\"0\n\007FlowMsg\022\010\n\004NONE\020\000\022\010\n\004PING\020\001\022\007\n\003ACK"
  "\020\002\022\010\n\004NACK\020\003\"\330\003\n\007Command\022\025\n\rActivatePane"
  "l\030\001 \001(\010\022\025\n\rSendPanelInfo\030\002 \001(\010\022\031\n\021SendPa"
  "nelTopology\030\003 \001(\010\022\035\n\025ReportHWCavailabili"
  "ty\030\004 \001(\010\022\031\n\021SendBurninProfile\030\006 \001(\010\022\020\n\010C"
  "learAll\030\n \001(\010\022\021\n\tClearLEDs\030\013 \001(\010\022\025\n\rClea"
  "rDisplays\030\014 \001(\010\022\016\n\006WakeUp\030\005 \001(\010\022\027\n\017GetSl"
  "eepTimeout\030\024 \001(\010\0225\n\017SetSleepTimeout\030\025 \001("
  "\0132\034.ibeam_rawpanel.SleepTimeout\022;\n\023SetWe"
  "bserverEnabled\030\026 \001(\0132\036.ibeam_rawpanel.We"
  "bserverState\0223\n\017PanelBrightness\030\027 \001(\0132\032."
  "ibeam_rawpanel.Brightness\022<\n\021PublishSyst"
  "emStat\030\036 \001(\0132!.ibeam_rawpanel.PublishSys"
  "temStat\"\035\n\014SleepTimeout\022\r\n\005Value\030\001 \001(\r\"!"
  "\n\016WebserverState\022\017\n\007Enabled\030\001 \001(\010\")\n\nBri"
  "ghtness\022\r\n\005OLEDs\030\001 \001(\r\022\014\n\004LEDs\030\002 \001(\r\"7\n\021"
  "PublishSystemStat\022\017\n\007Enabled\030\001 \001(\010\022\021\n\tPe"
  "riodSec\030\002 \001(\r\"\266\002\n\010HWCState\022\016\n\006HWCIDs\030\001 \003"
  "(\r\022(\n\007HWCMode\030\002 \001(\0132\027.ibeam_rawpanel.HWC"
  "Mode\022*\n\010HWCColor\030\003 \001(\0132\030.ibeam_rawpanel."
  "HWCColor\0220\n\013HWCExtended\030\004 \001(\0132\033.ibeam_ra"
  "wpanel.HWCExtended\022(\n\007HWCText\030\005 \001(\0132\027.ib"
  "eam_rawpanel.HWCText\022&\n\006HWCGfx\030\006 \001(\0132\026.i"
  "beam_rawpanel.HWCGfx\022@\n\023PublishRawADCVal"
  "ues\030\007 \001(\0132#.ibeam_rawpanel.PublishRawADC"
  "Values\"&\n\023PublishRawADCValues\022\017\n\007Enabled"
  "\030\001 \001(\010\"\256\001\n\007HWCMode\022-\n\005State\030\002 \001(\0162\036.ibea"
  "m_rawpanel.HWCMode.StateE\022\016\n\006Output\030\004 \001("
  "\010\022\024\n\014BlinkPattern\030\003 \001(\r\"N\n\006StateE\022\007\n\003OFF"
  "\020\000\022\r\n\tON_YELLOW\020\001\022\n\n\006ON_RED\020\002\022\014\n\010ON_GREE"
  "N\020\003\022\006\n\002ON\020\004\022\n\n\006DIMMED\020\005\"\252\001\n\013HWCExtended\022"
  "C\n\016Interpretation\030\002 \001(\0162+.ibeam_rawpanel"
  ".HWCExtended.InterpretationE\022\r\n\005Value\030\003 "
  "\001(\r\"G\n\017InterpretationE\022\010\n\004NONE\020\000\022\014\n\010STRE"
  "NGTH\020\001\022\t\n\005STEPS\020\003\022\006\n\002VU\020\004\022\t\n\005FADER\020\005\"f\n\010"
  "HWCColor\022*\n\010ColorRGB\030\001 \001(\0132\030.ibeam_rawpa"
  "nel.ColorRGB\022.\n\nColorIndex\030\002 \001(\0132\032.ibeam"
  "_rawpanel.ColorIndex\"c\n\005Color\022*\n\010ColorRG"
  "B\030\001 \001(\0132\030.ibeam_rawpanel.ColorRGB\022.\n\nCol"
  "orIndex\030\002 \001(\0132\032.ibeam_rawpanel.ColorInde"
  "x\"4\n\010ColorRGB\022\013\n\003Red\030\001 \001(\r\022\r\n\005Green\030\002 \001("
  "\r\022\014\n\004Blue\030\003 \001(\r\"\200\002\n\nColorIndex\0220\n\005Index\030"
  "\001 \001(\0162!.ibeam_rawpanel.ColorIndex.Colors"
  "\"\277\001\n\006Colors\022\013\n\007DEFAULT\020\000\022\007\n\003OFF\020\001\022\t\n\005WHI"
  "TE\020\002\022\010\n\004WARM\020\003\022\007\n\003RED\020\004\022\010\n\004ROSE\020\005\022\010\n\004PIN"
  "K\020\006\022\n\n\006PURPLE\020\007\022\t\n\005AMBER\020\010\022\n\n\006YELLOW\020\t\022\014"
  "\n\010DARKBLUE\020\n\022\010\n\004BLUE\020\013\022\007\n\003ICE\020\014\022\010\n\004CYAN\020"
  "\r\022\n\n\006SPRING\020\016\022\t\n\005GREEN\020\017\022\010\n\004MINT\020\020\"\330\r\n\007H"
  "WCText\022\024\n\014IntegerValue\030\002 \001(\021\0227\n\nFormatti"
  "ng\030\003 \001(\0162#.ibeam_rawpanel.HWCText.Format"
  "tingE\0225\n\tStateIcon\030\005 \001(\0162\".ibeam_rawpane"
  "l.HWCText.StateIconE\022;\n\014ModifierIcon\030\006 \001"
  "(\0162%.ibeam_rawpanel.HWCText.ModifierIcon"
  "E\022\r\n\005Title\030\007 \001(\t\022\026\n\016SolidHeaderBar\030\010 \001(\010"
  "\022\021\n\tTextline1\030\t \001(\t\022\021\n\tTextline2\030\n \001(\t\022\025"
  "\n\rIntegerValue2\030\013 \001(\021\0223\n\010PairMode\030\014 \001(\0162"
  "!.ibeam_rawpanel.HWCText.PairModeE\022-\n\005Sc"
  "ale\030\r \001(\0132\036.ibeam_rawpanel.HWCText.Scale"
  "M\0226\n\013TextStyling\030\016 \001(\0132!.ibeam_rawpanel."
  "HWCText.TextStyle\022\020\n\010Inverted\030\017 \001(\010\022)\n\nP"
  "ixelColor\030\020 \001(\0132\025.ibeam_rawpanel.Color\022."
  "\n\017BackgroundColor\030\021 \001(\0132\025.ibeam_rawpanel"
  ".Color\032\344\001\n\006ScaleM\022<\n\tScaleType\030\001 \001(\0162).i"
  "beam_rawpanel.HWCText.ScaleM.ScaleTypeE\022"
  "\020\n\010RangeLow\030\002 \001(\021\022\021\n\tRangeHigh\030\003 \001(\021\022\020\n\010"
  "LimitLow\030\004 \001(\021\022\021\n\tLimitHigh\030\005 \001(\021\"R\n\nSca"
  "leTypeE\022\n\n\006ST_OFF\020\000\022\017\n\013ST_STRENGTH\020\001\022\024\n\020"
  "ST_CENTER_MARKER\020\002\022\021\n\rST_CENTER_BAR\020\003\032\224\003"
  "\n\tTextStyle\0229\n\tTitleFont\030\001 \001(\0132&.ibeam_r"
  "awpanel.HWCText.TextStyle.Font\0228\n\010TextFo"
  "nt\030\002 \001(\0132&.ibeam_rawpanel.HWCText.TextSt"
  "yle.Font\022\022\n\nFixedWidth\030\003 \001(\010\022\027\n\017TitleBar"
  "Padding\030\004 \001(\r\022\035\n\025ExtraCharacterSpacing\030\005"
  " \001(\r\022\033\n\023UnformattedFontSize\030\006 \001(\r\032\250\001\n\004Fo"
  "nt\022B\n\010FontFace\030\001 \001(\01620.ibeam_rawpanel.HW"
  "CText.TextStyle.Font.FontFaceE\022\022\n\nTextHe"
  "ight\030\002 \001(\r\022\021\n\tTextWidth\030\003 \001(\r\"5\n\tFontFac"
  "eE\022\016\n\nST_DEFAULT\020\000\022\013\n\007ST_BOLD\020\001\022\013\n\007ST_TI"
  "NY\020\002\"\364\001\n\013FormattingE\022\017\n\013FMT_INTEGER\020\000\022\022\n"
  "\016FMT_FLOAT_2DEZ\020\001\022\022\n\016FMT_PERCENTAGE\020\002\022\n\n"
  "\006FMT_DB\020\003\022\016\n\nFMT_FRAMES\020\004\022\020\n\014FMT_ONEOVER"
  "X\020\005\022\016\n\nFMT_KELVIN\020\006\022\014\n\010FMT_HIDE\020\007\022\023\n\017FMT"
  "_FLOAT_X_XXX\020\010\022\023\n\017FMT_FLOAT_XX_XX\020\t\022\017\n\013F"
  "MT_ONELINE\020\n\022\020\n\014FMT_TWOLINES\020\013\022\023\n\017FMT_FL"
  "OAT_XXX_X\020\014\"D\n\nStateIconE\022\013\n\007SI_NONE\020\000\022\013"
  "\n\007SI_FINE\020\001\022\013\n\007SI_LOCK\020\002\022\017\n\013SI_NOACCESS\020"
  "\003\"z\n\rModifierIconE\022\013\n\007MI_NONE\020\000\022\014\n\010MI_CY"
  "CLE\020\001\022\013\n\007MI_DOWN\020\002\022\t\n\005MI_UP\020\003\022\013\n\007MI_HOLD"
  "\020\004\022\r\n\tMI_TOGGLE\020\005\022\t\n\005MI_OK\020\006\022\017\n\013MI_QUEST"
  "ION\020\007\"f\n\tPairModeE\022\n\n\006PM_OFF\020\000\022\017\n\013PM_UNM"
  "ARKED\020\001\022\023\n\017PM_UPPER_MARKED\020\002\022\023\n\017PM_LOWER"
  "_MARKED\020\003\022\022\n\016PM_BOTH_MARKED\020\004\"\265\001\n\006HWCGfx"
  "\0224\n\tImageType\030\001 \001(\0162!.ibeam_rawpanel.HWC"
  "Gfx.ImageTypeE\022\t\n\001W\030\002 \001(\r\022\t\n\001H\030\003 \001(\r\022\020\n\010"
  "XYoffset\030\004 \001(\010\022\t\n\001X\030\005 \001(\r\022\t\n\001Y\030\006 \001(\r\022\021\n\t"
  "ImageData\030\020 \001(\014\"$\n\nImageTypeE\022\010\n\004MONO\020\000\022"
  "\014\n\010RGB16bit\020\001\"\326\001\n\nImgConvert\0226\n\010FileType"
  "\030\001 \001(\0162$.ibeam_rawpanel.ImgConvert.FileT"
  "ypeE\0224\n\007Scaling\030\002 \001(\0162#.ibeam_rawpanel.I"
  "mgConvert.ScalingE\022\021\n\tGrayscale\030\003 \001(\010\"\036\n"
  "\tFileTypeE\022\007\n\003PNG\020\000\022\010\n\004JPEG\020\001\"\'\n\010Scaling"
  "E\022\010\n\004FILL\020\000\022\007\n\003FIT\020\001\022\010\n\004CROP\020\002\"\315\004\n\017Outbo"
  "undMessage\022<\n\013FlowMessage\030\001 \001(\0162\'.ibeam_"
  "rawpanel.OutboundMessage.FlowMsg\022M\n\017HWCa"
  "vailability\030\002 \003(\01324.ibeam_rawpanel.Outbo"
  "undMessage.HWCavailabilityEntry\022,\n\tPanel"
  "Info\030\004 \001(\0132\031.ibeam_rawpanel.PanelInfo\0224\n"
  "\rPanelTopology\030\005 \001(\0132\035.ibeam_rawpanel.Pa"
  "nelTopology\0224\n\rBurninProfile\030\t \001(\0132\035.ibe"
  "am_rawpanel.BurninProfile\0222\n\014SleepTimeou"
  "t\030\006 \001(\0132\034.ibeam_rawpanel.SleepTimeout\022.\n"
  "\nSleepState\030\007 \001(\0132\032.ibeam_rawpanel.Sleep"
  "State\022(\n\006Events\030\010 \003(\0132\030.ibeam_rawpanel.H"
  "WCEvent\0326\n\024HWCavailabilityEntry\022\013\n\003key\030\001"
  " \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"M\n\007FlowMsg\022\010\n\004NO"
  "NE\020\000\022\010\n\004PING\020\001\022\007\n\003ACK\020\002\022\010\n\004NACK\020\003\022\007\n\003BSY"
  "\020\004\022\007\n\003RDY\020\005\022\t\n\005HELLO\020d\" \n\nSleepState\022\022\n\n"
  "IsSleeping\030\001 \001(\010\"\302\002\n\010HWCEvent\022\r\n\005HWCID\030\001"
  " \001(\r\022\021\n\tTimestamp\030\006 \001(\r\022+\n\006Binary\030\002 \001(\0132"
  "\033.ibeam_rawpanel.BinaryEvent\022+\n\006Pulsed\030\003"
  " \001(\0132\033.ibeam_rawpanel.PulsedEvent\022/\n\010Abs"
  "olute\030\004 \001(\0132\035.ibeam_rawpanel.AbsoluteEve"
  "nt\022)\n\005Speed\030\005 \001(\0132\032.ibeam_rawpanel.Speed"
  "Event\0221\n\tRawAnalog\030\007 \001(\0132\036.ibeam_rawpane"
  "l.RawAnalogEvent\022+\n\007SysStat\030\010 \001(\0132\032.ibea"
  "m_rawpanel.SystemStat\"\221\001\n\013BinaryEvent\022\017\n"
  "\007Pressed\030\001 \001(\010\0220\n\004Edge\030\002 \001(\0162\".ibeam_raw"
  "panel.BinaryEvent.EdgeID\"\?\n\006EdgeID\022\013\n\007UN"
  "KNOWN\020\000\022\007\n\003TOP\020\001\022\010\n\004LEFT\020\002\022\n\n\006BOTTOM\020\004\022\t"
  "\n\005RIGHT\020\010\"\034\n\013PulsedEvent\022\r\n\005Value\030\001 \001(\021\""
  "\036\n\rAbsoluteEvent\022\r\n\005Value\030\001 \001(\r\"\033\n\nSpeed"
  "Event\022\r\n\005Value\030\001 \001(\021\"\037\n\016RawAnalogEvent\022\r"
  "\n\005Value\030\001 \001(\r\"@\n\nSystemStat\022\020\n\010CPUUsage\030"
  "\001 \001(\r\022\017\n\007CPUTemp\030\002 \001(\002\022\017\n\007ExtTemp\030\003 \001(\002\""
  "c\n\tPanelInfo\022\r\n\005Model\030\001 \001(\t\022\016\n\006Serial\030\002 "
  "\001(\t\022\014\n\004Name\030\003 \001(\t\022\027\n\017SoftwareVersion\030\004 \001"
  "(\t\022\020\n\010Platform\030\005 \001(\t\".\n\rPanelTopology\022\017\n"
  "\007Svgbase\030\001 \001(\t\022\014\n\004Json\030\002 \001(\t\"\035\n\rBurninPr"
  "ofile\022\014\n\004Json\030\001 \001(\tB!Z\037./ibeam_rawpanel;"
  "ibeam_rawpanelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ibeam_2drawpanel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ibeam_2drawpanel_2eproto_sccs[33] = {
  &scc_info_AbsoluteEvent_ibeam_2drawpanel_2eproto.base,
  &scc_info_BinaryEvent_ibeam_2drawpanel_2eproto.base,
  &scc_info_Brightness_ibeam_2drawpanel_2eproto.base,
  &scc_info_BurninProfile_ibeam_2drawpanel_2eproto.base,
  &scc_info_Color_ibeam_2drawpanel_2eproto.base,
  &scc_info_ColorIndex_ibeam_2drawpanel_2eproto.base,
  &scc_info_ColorRGB_ibeam_2drawpanel_2eproto.base,
  &scc_info_Command_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCColor_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCEvent_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCExtended_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCGfx_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCMode_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCState_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCText_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCText_ScaleM_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCText_TextStyle_ibeam_2drawpanel_2eproto.base,
  &scc_info_HWCText_TextStyle_Font_ibeam_2drawpanel_2eproto.base,
  &scc_info_ImgConvert_ibeam_2drawpanel_2eproto.base,
  &scc_info_InboundMessage_ibeam_2drawpanel_2eproto.base,
  &scc_info_OutboundMessage_ibeam_2drawpanel_2eproto.base,
  &scc_info_OutboundMessage_HWCavailabilityEntry_DoNotUse_ibeam_2drawpanel_2eproto.base,
  &scc_info_PanelInfo_ibeam_2drawpanel_2eproto.base,
  &scc_info_PanelTopology_ibeam_2drawpanel_2eproto.base,
  &scc_info_PublishRawADCValues_ibeam_2drawpanel_2eproto.base,
  &scc_info_PublishSystemStat_ibeam_2drawpanel_2eproto.base,
  &scc_info_PulsedEvent_ibeam_2drawpanel_2eproto.base,
  &scc_info_RawAnalogEvent_ibeam_2drawpanel_2eproto.base,
  &scc_info_SleepState_ibeam_2drawpanel_2eproto.base,
  &scc_info_SleepTimeout_ibeam_2drawpanel_2eproto.base,
  &scc_info_SpeedEvent_ibeam_2drawpanel_2eproto.base,
  &scc_info_SystemStat_ibeam_2drawpanel_2eproto.base,
  &scc_info_WebserverState_ibeam_2drawpanel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ibeam_2drawpanel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ibeam_2drawpanel_2eproto = {
  false, false, descriptor_table_protodef_ibeam_2drawpanel_2eproto, "ibeam-rawpanel.proto", 5782,
  &descriptor_table_ibeam_2drawpanel_2eproto_once, descriptor_table_ibeam_2drawpanel_2eproto_sccs, descriptor_table_ibeam_2drawpanel_2eproto_deps, 33, 0,
  schemas, file_default_instances, TableStruct_ibeam_2drawpanel_2eproto::offsets,
  file_level_metadata_ibeam_2drawpanel_2eproto, 33, file_level_enum_descriptors_ibeam_2drawpanel_2eproto, file_level_service_descriptors_ibeam_2drawpanel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ibeam_2drawpanel_2eproto(&descriptor_table_ibeam_2drawpanel_2eproto);
namespace ibeam_rawpanel {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InboundMessage_FlowMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[0];
}
bool InboundMessage_FlowMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InboundMessage_FlowMsg InboundMessage::NONE;
constexpr InboundMessage_FlowMsg InboundMessage::PING;
constexpr InboundMessage_FlowMsg InboundMessage::ACK;
constexpr InboundMessage_FlowMsg InboundMessage::NACK;
constexpr InboundMessage_FlowMsg InboundMessage::FlowMsg_MIN;
constexpr InboundMessage_FlowMsg InboundMessage::FlowMsg_MAX;
constexpr int InboundMessage::FlowMsg_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCMode_StateE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[1];
}
bool HWCMode_StateE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCMode_StateE HWCMode::OFF;
constexpr HWCMode_StateE HWCMode::ON_YELLOW;
constexpr HWCMode_StateE HWCMode::ON_RED;
constexpr HWCMode_StateE HWCMode::ON_GREEN;
constexpr HWCMode_StateE HWCMode::ON;
constexpr HWCMode_StateE HWCMode::DIMMED;
constexpr HWCMode_StateE HWCMode::StateE_MIN;
constexpr HWCMode_StateE HWCMode::StateE_MAX;
constexpr int HWCMode::StateE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCExtended_InterpretationE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[2];
}
bool HWCExtended_InterpretationE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCExtended_InterpretationE HWCExtended::NONE;
constexpr HWCExtended_InterpretationE HWCExtended::STRENGTH;
constexpr HWCExtended_InterpretationE HWCExtended::STEPS;
constexpr HWCExtended_InterpretationE HWCExtended::VU;
constexpr HWCExtended_InterpretationE HWCExtended::FADER;
constexpr HWCExtended_InterpretationE HWCExtended::InterpretationE_MIN;
constexpr HWCExtended_InterpretationE HWCExtended::InterpretationE_MAX;
constexpr int HWCExtended::InterpretationE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorIndex_Colors_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[3];
}
bool ColorIndex_Colors_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ColorIndex_Colors ColorIndex::DEFAULT;
constexpr ColorIndex_Colors ColorIndex::OFF;
constexpr ColorIndex_Colors ColorIndex::WHITE;
constexpr ColorIndex_Colors ColorIndex::WARM;
constexpr ColorIndex_Colors ColorIndex::RED;
constexpr ColorIndex_Colors ColorIndex::ROSE;
constexpr ColorIndex_Colors ColorIndex::PINK;
constexpr ColorIndex_Colors ColorIndex::PURPLE;
constexpr ColorIndex_Colors ColorIndex::AMBER;
constexpr ColorIndex_Colors ColorIndex::YELLOW;
constexpr ColorIndex_Colors ColorIndex::DARKBLUE;
constexpr ColorIndex_Colors ColorIndex::BLUE;
constexpr ColorIndex_Colors ColorIndex::ICE;
constexpr ColorIndex_Colors ColorIndex::CYAN;
constexpr ColorIndex_Colors ColorIndex::SPRING;
constexpr ColorIndex_Colors ColorIndex::GREEN;
constexpr ColorIndex_Colors ColorIndex::MINT;
constexpr ColorIndex_Colors ColorIndex::Colors_MIN;
constexpr ColorIndex_Colors ColorIndex::Colors_MAX;
constexpr int ColorIndex::Colors_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCText_ScaleM_ScaleTypeE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[4];
}
bool HWCText_ScaleM_ScaleTypeE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCText_ScaleM_ScaleTypeE HWCText_ScaleM::ST_OFF;
constexpr HWCText_ScaleM_ScaleTypeE HWCText_ScaleM::ST_STRENGTH;
constexpr HWCText_ScaleM_ScaleTypeE HWCText_ScaleM::ST_CENTER_MARKER;
constexpr HWCText_ScaleM_ScaleTypeE HWCText_ScaleM::ST_CENTER_BAR;
constexpr HWCText_ScaleM_ScaleTypeE HWCText_ScaleM::ScaleTypeE_MIN;
constexpr HWCText_ScaleM_ScaleTypeE HWCText_ScaleM::ScaleTypeE_MAX;
constexpr int HWCText_ScaleM::ScaleTypeE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCText_TextStyle_Font_FontFaceE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[5];
}
bool HWCText_TextStyle_Font_FontFaceE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCText_TextStyle_Font_FontFaceE HWCText_TextStyle_Font::ST_DEFAULT;
constexpr HWCText_TextStyle_Font_FontFaceE HWCText_TextStyle_Font::ST_BOLD;
constexpr HWCText_TextStyle_Font_FontFaceE HWCText_TextStyle_Font::ST_TINY;
constexpr HWCText_TextStyle_Font_FontFaceE HWCText_TextStyle_Font::FontFaceE_MIN;
constexpr HWCText_TextStyle_Font_FontFaceE HWCText_TextStyle_Font::FontFaceE_MAX;
constexpr int HWCText_TextStyle_Font::FontFaceE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCText_FormattingE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[6];
}
bool HWCText_FormattingE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCText_FormattingE HWCText::FMT_INTEGER;
constexpr HWCText_FormattingE HWCText::FMT_FLOAT_2DEZ;
constexpr HWCText_FormattingE HWCText::FMT_PERCENTAGE;
constexpr HWCText_FormattingE HWCText::FMT_DB;
constexpr HWCText_FormattingE HWCText::FMT_FRAMES;
constexpr HWCText_FormattingE HWCText::FMT_ONEOVERX;
constexpr HWCText_FormattingE HWCText::FMT_KELVIN;
constexpr HWCText_FormattingE HWCText::FMT_HIDE;
constexpr HWCText_FormattingE HWCText::FMT_FLOAT_X_XXX;
constexpr HWCText_FormattingE HWCText::FMT_FLOAT_XX_XX;
constexpr HWCText_FormattingE HWCText::FMT_ONELINE;
constexpr HWCText_FormattingE HWCText::FMT_TWOLINES;
constexpr HWCText_FormattingE HWCText::FMT_FLOAT_XXX_X;
constexpr HWCText_FormattingE HWCText::FormattingE_MIN;
constexpr HWCText_FormattingE HWCText::FormattingE_MAX;
constexpr int HWCText::FormattingE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCText_StateIconE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[7];
}
bool HWCText_StateIconE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCText_StateIconE HWCText::SI_NONE;
constexpr HWCText_StateIconE HWCText::SI_FINE;
constexpr HWCText_StateIconE HWCText::SI_LOCK;
constexpr HWCText_StateIconE HWCText::SI_NOACCESS;
constexpr HWCText_StateIconE HWCText::StateIconE_MIN;
constexpr HWCText_StateIconE HWCText::StateIconE_MAX;
constexpr int HWCText::StateIconE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCText_ModifierIconE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[8];
}
bool HWCText_ModifierIconE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCText_ModifierIconE HWCText::MI_NONE;
constexpr HWCText_ModifierIconE HWCText::MI_CYCLE;
constexpr HWCText_ModifierIconE HWCText::MI_DOWN;
constexpr HWCText_ModifierIconE HWCText::MI_UP;
constexpr HWCText_ModifierIconE HWCText::MI_HOLD;
constexpr HWCText_ModifierIconE HWCText::MI_TOGGLE;
constexpr HWCText_ModifierIconE HWCText::MI_OK;
constexpr HWCText_ModifierIconE HWCText::MI_QUESTION;
constexpr HWCText_ModifierIconE HWCText::ModifierIconE_MIN;
constexpr HWCText_ModifierIconE HWCText::ModifierIconE_MAX;
constexpr int HWCText::ModifierIconE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCText_PairModeE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[9];
}
bool HWCText_PairModeE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCText_PairModeE HWCText::PM_OFF;
constexpr HWCText_PairModeE HWCText::PM_UNMARKED;
constexpr HWCText_PairModeE HWCText::PM_UPPER_MARKED;
constexpr HWCText_PairModeE HWCText::PM_LOWER_MARKED;
constexpr HWCText_PairModeE HWCText::PM_BOTH_MARKED;
constexpr HWCText_PairModeE HWCText::PairModeE_MIN;
constexpr HWCText_PairModeE HWCText::PairModeE_MAX;
constexpr int HWCText::PairModeE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HWCGfx_ImageTypeE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[10];
}
bool HWCGfx_ImageTypeE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HWCGfx_ImageTypeE HWCGfx::MONO;
constexpr HWCGfx_ImageTypeE HWCGfx::RGB16bit;
constexpr HWCGfx_ImageTypeE HWCGfx::ImageTypeE_MIN;
constexpr HWCGfx_ImageTypeE HWCGfx::ImageTypeE_MAX;
constexpr int HWCGfx::ImageTypeE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImgConvert_FileTypeE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[11];
}
bool ImgConvert_FileTypeE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImgConvert_FileTypeE ImgConvert::PNG;
constexpr ImgConvert_FileTypeE ImgConvert::JPEG;
constexpr ImgConvert_FileTypeE ImgConvert::FileTypeE_MIN;
constexpr ImgConvert_FileTypeE ImgConvert::FileTypeE_MAX;
constexpr int ImgConvert::FileTypeE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImgConvert_ScalingE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[12];
}
bool ImgConvert_ScalingE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImgConvert_ScalingE ImgConvert::FILL;
constexpr ImgConvert_ScalingE ImgConvert::FIT;
constexpr ImgConvert_ScalingE ImgConvert::CROP;
constexpr ImgConvert_ScalingE ImgConvert::ScalingE_MIN;
constexpr ImgConvert_ScalingE ImgConvert::ScalingE_MAX;
constexpr int ImgConvert::ScalingE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutboundMessage_FlowMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[13];
}
bool OutboundMessage_FlowMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OutboundMessage_FlowMsg OutboundMessage::NONE;
constexpr OutboundMessage_FlowMsg OutboundMessage::PING;
constexpr OutboundMessage_FlowMsg OutboundMessage::ACK;
constexpr OutboundMessage_FlowMsg OutboundMessage::NACK;
constexpr OutboundMessage_FlowMsg OutboundMessage::BSY;
constexpr OutboundMessage_FlowMsg OutboundMessage::RDY;
constexpr OutboundMessage_FlowMsg OutboundMessage::HELLO;
constexpr OutboundMessage_FlowMsg OutboundMessage::FlowMsg_MIN;
constexpr OutboundMessage_FlowMsg OutboundMessage::FlowMsg_MAX;
constexpr int OutboundMessage::FlowMsg_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BinaryEvent_EdgeID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibeam_2drawpanel_2eproto);
  return file_level_enum_descriptors_ibeam_2drawpanel_2eproto[14];
}
bool BinaryEvent_EdgeID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BinaryEvent_EdgeID BinaryEvent::UNKNOWN;
constexpr BinaryEvent_EdgeID BinaryEvent::TOP;
constexpr BinaryEvent_EdgeID BinaryEvent::LEFT;
constexpr BinaryEvent_EdgeID BinaryEvent::BOTTOM;
constexpr BinaryEvent_EdgeID BinaryEvent::RIGHT;
constexpr BinaryEvent_EdgeID BinaryEvent::EdgeID_MIN;
constexpr BinaryEvent_EdgeID BinaryEvent::EdgeID_MAX;
constexpr int BinaryEvent::EdgeID_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class InboundMessage::_Internal {
 public:
  static const ::ibeam_rawpanel::Command& command(const InboundMessage* msg);
};

const ::ibeam_rawpanel::Command&
InboundMessage::_Internal::command(const InboundMessage* msg) {
  return *msg->command_;
}
InboundMessage::InboundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.InboundMessage)
}
InboundMessage::InboundMessage(const InboundMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    command_ = new ::ibeam_rawpanel::Command(*from.command_);
  } else {
    command_ = nullptr;
  }
  flowmessage_ = from.flowmessage_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.InboundMessage)
}

void InboundMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InboundMessage_ibeam_2drawpanel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flowmessage_) -
      reinterpret_cast<char*>(&command_)) + sizeof(flowmessage_));
}

InboundMessage::~InboundMessage() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.InboundMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InboundMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete command_;
}

void InboundMessage::ArenaDtor(void* object) {
  InboundMessage* _this = reinterpret_cast< InboundMessage* >(object);
  (void)_this;
}
void InboundMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InboundMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InboundMessage& InboundMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InboundMessage_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void InboundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.InboundMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  if (GetArena() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  flowmessage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InboundMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.InboundMessage.FlowMsg FlowMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flowmessage(static_cast<::ibeam_rawpanel::InboundMessage_FlowMsg>(val));
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.Command Command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ibeam_rawpanel.HWCState States = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InboundMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.InboundMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.InboundMessage.FlowMsg FlowMessage = 1;
  if (this->flowmessage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flowmessage(), target);
  }

  // .ibeam_rawpanel.Command Command = 2;
  if (this->has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command(this), target, stream);
  }

  // repeated .ibeam_rawpanel.HWCState States = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.InboundMessage)
  return target;
}

size_t InboundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.InboundMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibeam_rawpanel.HWCState States = 8;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ibeam_rawpanel.Command Command = 2;
  if (this->has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  // .ibeam_rawpanel.InboundMessage.FlowMsg FlowMessage = 1;
  if (this->flowmessage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flowmessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InboundMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.InboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InboundMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InboundMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.InboundMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.InboundMessage)
    MergeFrom(*source);
  }
}

void InboundMessage::MergeFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.InboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.has_command()) {
    _internal_mutable_command()->::ibeam_rawpanel::Command::MergeFrom(from._internal_command());
  }
  if (from.flowmessage() != 0) {
    _internal_set_flowmessage(from._internal_flowmessage());
  }
}

void InboundMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.InboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboundMessage::CopyFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.InboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundMessage::IsInitialized() const {
  return true;
}

void InboundMessage::InternalSwap(InboundMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundMessage, flowmessage_)
      + sizeof(InboundMessage::flowmessage_)
      - PROTOBUF_FIELD_OFFSET(InboundMessage, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InboundMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Command::_Internal {
 public:
  static const ::ibeam_rawpanel::SleepTimeout& setsleeptimeout(const Command* msg);
  static const ::ibeam_rawpanel::WebserverState& setwebserverenabled(const Command* msg);
  static const ::ibeam_rawpanel::Brightness& panelbrightness(const Command* msg);
  static const ::ibeam_rawpanel::PublishSystemStat& publishsystemstat(const Command* msg);
};

const ::ibeam_rawpanel::SleepTimeout&
Command::_Internal::setsleeptimeout(const Command* msg) {
  return *msg->setsleeptimeout_;
}
const ::ibeam_rawpanel::WebserverState&
Command::_Internal::setwebserverenabled(const Command* msg) {
  return *msg->setwebserverenabled_;
}
const ::ibeam_rawpanel::Brightness&
Command::_Internal::panelbrightness(const Command* msg) {
  return *msg->panelbrightness_;
}
const ::ibeam_rawpanel::PublishSystemStat&
Command::_Internal::publishsystemstat(const Command* msg) {
  return *msg->publishsystemstat_;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_setsleeptimeout()) {
    setsleeptimeout_ = new ::ibeam_rawpanel::SleepTimeout(*from.setsleeptimeout_);
  } else {
    setsleeptimeout_ = nullptr;
  }
  if (from._internal_has_setwebserverenabled()) {
    setwebserverenabled_ = new ::ibeam_rawpanel::WebserverState(*from.setwebserverenabled_);
  } else {
    setwebserverenabled_ = nullptr;
  }
  if (from._internal_has_panelbrightness()) {
    panelbrightness_ = new ::ibeam_rawpanel::Brightness(*from.panelbrightness_);
  } else {
    panelbrightness_ = nullptr;
  }
  if (from._internal_has_publishsystemstat()) {
    publishsystemstat_ = new ::ibeam_rawpanel::PublishSystemStat(*from.publishsystemstat_);
  } else {
    publishsystemstat_ = nullptr;
  }
  ::memcpy(&activatepanel_, &from.activatepanel_,
    static_cast<size_t>(reinterpret_cast<char*>(&getsleeptimeout_) -
    reinterpret_cast<char*>(&activatepanel_)) + sizeof(getsleeptimeout_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_ibeam_2drawpanel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&setsleeptimeout_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&getsleeptimeout_) -
      reinterpret_cast<char*>(&setsleeptimeout_)) + sizeof(getsleeptimeout_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete setsleeptimeout_;
  if (this != internal_default_instance()) delete setwebserverenabled_;
  if (this != internal_default_instance()) delete panelbrightness_;
  if (this != internal_default_instance()) delete publishsystemstat_;
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && setsleeptimeout_ != nullptr) {
    delete setsleeptimeout_;
  }
  setsleeptimeout_ = nullptr;
  if (GetArena() == nullptr && setwebserverenabled_ != nullptr) {
    delete setwebserverenabled_;
  }
  setwebserverenabled_ = nullptr;
  if (GetArena() == nullptr && panelbrightness_ != nullptr) {
    delete panelbrightness_;
  }
  panelbrightness_ = nullptr;
  if (GetArena() == nullptr && publishsystemstat_ != nullptr) {
    delete publishsystemstat_;
  }
  publishsystemstat_ = nullptr;
  ::memset(&activatepanel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&getsleeptimeout_) -
      reinterpret_cast<char*>(&activatepanel_)) + sizeof(getsleeptimeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ActivatePanel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          activatepanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool SendPanelInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sendpanelinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool SendPanelTopology = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sendpaneltopology_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ReportHWCavailability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reporthwcavailability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool WakeUp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wakeup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool SendBurninProfile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sendburninprofile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ClearAll = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          clearall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ClearLEDs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          clearleds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ClearDisplays = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cleardisplays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GetSleepTimeout = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          getsleeptimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.SleepTimeout SetSleepTimeout = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_setsleeptimeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.WebserverState SetWebserverEnabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_setwebserverenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.Brightness PanelBrightness = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_panelbrightness(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.PublishSystemStat PublishSystemStat = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_publishsystemstat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ActivatePanel = 1;
  if (this->activatepanel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_activatepanel(), target);
  }

  // bool SendPanelInfo = 2;
  if (this->sendpanelinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_sendpanelinfo(), target);
  }

  // bool SendPanelTopology = 3;
  if (this->sendpaneltopology() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sendpaneltopology(), target);
  }

  // bool ReportHWCavailability = 4;
  if (this->reporthwcavailability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reporthwcavailability(), target);
  }

  // bool WakeUp = 5;
  if (this->wakeup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_wakeup(), target);
  }

  // bool SendBurninProfile = 6;
  if (this->sendburninprofile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_sendburninprofile(), target);
  }

  // bool ClearAll = 10;
  if (this->clearall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_clearall(), target);
  }

  // bool ClearLEDs = 11;
  if (this->clearleds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_clearleds(), target);
  }

  // bool ClearDisplays = 12;
  if (this->cleardisplays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_cleardisplays(), target);
  }

  // bool GetSleepTimeout = 20;
  if (this->getsleeptimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_getsleeptimeout(), target);
  }

  // .ibeam_rawpanel.SleepTimeout SetSleepTimeout = 21;
  if (this->has_setsleeptimeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::setsleeptimeout(this), target, stream);
  }

  // .ibeam_rawpanel.WebserverState SetWebserverEnabled = 22;
  if (this->has_setwebserverenabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::setwebserverenabled(this), target, stream);
  }

  // .ibeam_rawpanel.Brightness PanelBrightness = 23;
  if (this->has_panelbrightness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::panelbrightness(this), target, stream);
  }

  // .ibeam_rawpanel.PublishSystemStat PublishSystemStat = 30;
  if (this->has_publishsystemstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::publishsystemstat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.SleepTimeout SetSleepTimeout = 21;
  if (this->has_setsleeptimeout()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setsleeptimeout_);
  }

  // .ibeam_rawpanel.WebserverState SetWebserverEnabled = 22;
  if (this->has_setwebserverenabled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setwebserverenabled_);
  }

  // .ibeam_rawpanel.Brightness PanelBrightness = 23;
  if (this->has_panelbrightness()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *panelbrightness_);
  }

  // .ibeam_rawpanel.PublishSystemStat PublishSystemStat = 30;
  if (this->has_publishsystemstat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publishsystemstat_);
  }

  // bool ActivatePanel = 1;
  if (this->activatepanel() != 0) {
    total_size += 1 + 1;
  }

  // bool SendPanelInfo = 2;
  if (this->sendpanelinfo() != 0) {
    total_size += 1 + 1;
  }

  // bool SendPanelTopology = 3;
  if (this->sendpaneltopology() != 0) {
    total_size += 1 + 1;
  }

  // bool ReportHWCavailability = 4;
  if (this->reporthwcavailability() != 0) {
    total_size += 1 + 1;
  }

  // bool SendBurninProfile = 6;
  if (this->sendburninprofile() != 0) {
    total_size += 1 + 1;
  }

  // bool ClearAll = 10;
  if (this->clearall() != 0) {
    total_size += 1 + 1;
  }

  // bool ClearLEDs = 11;
  if (this->clearleds() != 0) {
    total_size += 1 + 1;
  }

  // bool ClearDisplays = 12;
  if (this->cleardisplays() != 0) {
    total_size += 1 + 1;
  }

  // bool WakeUp = 5;
  if (this->wakeup() != 0) {
    total_size += 1 + 1;
  }

  // bool GetSleepTimeout = 20;
  if (this->getsleeptimeout() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_setsleeptimeout()) {
    _internal_mutable_setsleeptimeout()->::ibeam_rawpanel::SleepTimeout::MergeFrom(from._internal_setsleeptimeout());
  }
  if (from.has_setwebserverenabled()) {
    _internal_mutable_setwebserverenabled()->::ibeam_rawpanel::WebserverState::MergeFrom(from._internal_setwebserverenabled());
  }
  if (from.has_panelbrightness()) {
    _internal_mutable_panelbrightness()->::ibeam_rawpanel::Brightness::MergeFrom(from._internal_panelbrightness());
  }
  if (from.has_publishsystemstat()) {
    _internal_mutable_publishsystemstat()->::ibeam_rawpanel::PublishSystemStat::MergeFrom(from._internal_publishsystemstat());
  }
  if (from.activatepanel() != 0) {
    _internal_set_activatepanel(from._internal_activatepanel());
  }
  if (from.sendpanelinfo() != 0) {
    _internal_set_sendpanelinfo(from._internal_sendpanelinfo());
  }
  if (from.sendpaneltopology() != 0) {
    _internal_set_sendpaneltopology(from._internal_sendpaneltopology());
  }
  if (from.reporthwcavailability() != 0) {
    _internal_set_reporthwcavailability(from._internal_reporthwcavailability());
  }
  if (from.sendburninprofile() != 0) {
    _internal_set_sendburninprofile(from._internal_sendburninprofile());
  }
  if (from.clearall() != 0) {
    _internal_set_clearall(from._internal_clearall());
  }
  if (from.clearleds() != 0) {
    _internal_set_clearleds(from._internal_clearleds());
  }
  if (from.cleardisplays() != 0) {
    _internal_set_cleardisplays(from._internal_cleardisplays());
  }
  if (from.wakeup() != 0) {
    _internal_set_wakeup(from._internal_wakeup());
  }
  if (from.getsleeptimeout() != 0) {
    _internal_set_getsleeptimeout(from._internal_getsleeptimeout());
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, getsleeptimeout_)
      + sizeof(Command::getsleeptimeout_)
      - PROTOBUF_FIELD_OFFSET(Command, setsleeptimeout_)>(
          reinterpret_cast<char*>(&setsleeptimeout_),
          reinterpret_cast<char*>(&other->setsleeptimeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SleepTimeout::_Internal {
 public:
};

SleepTimeout::SleepTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.SleepTimeout)
}
SleepTimeout::SleepTimeout(const SleepTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.SleepTimeout)
}

void SleepTimeout::SharedCtor() {
  value_ = 0u;
}

SleepTimeout::~SleepTimeout() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.SleepTimeout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SleepTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SleepTimeout::ArenaDtor(void* object) {
  SleepTimeout* _this = reinterpret_cast< SleepTimeout* >(object);
  (void)_this;
}
void SleepTimeout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SleepTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SleepTimeout& SleepTimeout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SleepTimeout_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void SleepTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.SleepTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SleepTimeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SleepTimeout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.SleepTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.SleepTimeout)
  return target;
}

size_t SleepTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.SleepTimeout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SleepTimeout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.SleepTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const SleepTimeout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SleepTimeout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.SleepTimeout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.SleepTimeout)
    MergeFrom(*source);
  }
}

void SleepTimeout::MergeFrom(const SleepTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.SleepTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SleepTimeout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.SleepTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SleepTimeout::CopyFrom(const SleepTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.SleepTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SleepTimeout::IsInitialized() const {
  return true;
}

void SleepTimeout::InternalSwap(SleepTimeout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SleepTimeout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WebserverState::_Internal {
 public:
};

WebserverState::WebserverState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.WebserverState)
}
WebserverState::WebserverState(const WebserverState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.WebserverState)
}

void WebserverState::SharedCtor() {
  enabled_ = false;
}

WebserverState::~WebserverState() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.WebserverState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WebserverState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WebserverState::ArenaDtor(void* object) {
  WebserverState* _this = reinterpret_cast< WebserverState* >(object);
  (void)_this;
}
void WebserverState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WebserverState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebserverState& WebserverState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebserverState_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void WebserverState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.WebserverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebserverState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WebserverState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.WebserverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.WebserverState)
  return target;
}

size_t WebserverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.WebserverState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebserverState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.WebserverState)
  GOOGLE_DCHECK_NE(&from, this);
  const WebserverState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WebserverState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.WebserverState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.WebserverState)
    MergeFrom(*source);
  }
}

void WebserverState::MergeFrom(const WebserverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.WebserverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void WebserverState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.WebserverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebserverState::CopyFrom(const WebserverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.WebserverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebserverState::IsInitialized() const {
  return true;
}

void WebserverState::InternalSwap(WebserverState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WebserverState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Brightness::_Internal {
 public:
};

Brightness::Brightness(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.Brightness)
}
Brightness::Brightness(const Brightness& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&oleds_, &from.oleds_,
    static_cast<size_t>(reinterpret_cast<char*>(&leds_) -
    reinterpret_cast<char*>(&oleds_)) + sizeof(leds_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.Brightness)
}

void Brightness::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&oleds_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&leds_) -
      reinterpret_cast<char*>(&oleds_)) + sizeof(leds_));
}

Brightness::~Brightness() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.Brightness)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Brightness::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Brightness::ArenaDtor(void* object) {
  Brightness* _this = reinterpret_cast< Brightness* >(object);
  (void)_this;
}
void Brightness::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Brightness::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brightness& Brightness::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brightness_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void Brightness::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.Brightness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&oleds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leds_) -
      reinterpret_cast<char*>(&oleds_)) + sizeof(leds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brightness::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 OLEDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          oleds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LEDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brightness::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.Brightness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 OLEDs = 1;
  if (this->oleds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_oleds(), target);
  }

  // uint32 LEDs = 2;
  if (this->leds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.Brightness)
  return target;
}

size_t Brightness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.Brightness)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 OLEDs = 1;
  if (this->oleds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oleds());
  }

  // uint32 LEDs = 2;
  if (this->leds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brightness::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.Brightness)
  GOOGLE_DCHECK_NE(&from, this);
  const Brightness* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brightness>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.Brightness)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.Brightness)
    MergeFrom(*source);
  }
}

void Brightness::MergeFrom(const Brightness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.Brightness)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oleds() != 0) {
    _internal_set_oleds(from._internal_oleds());
  }
  if (from.leds() != 0) {
    _internal_set_leds(from._internal_leds());
  }
}

void Brightness::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.Brightness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brightness::CopyFrom(const Brightness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.Brightness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brightness::IsInitialized() const {
  return true;
}

void Brightness::InternalSwap(Brightness* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brightness, leds_)
      + sizeof(Brightness::leds_)
      - PROTOBUF_FIELD_OFFSET(Brightness, oleds_)>(
          reinterpret_cast<char*>(&oleds_),
          reinterpret_cast<char*>(&other->oleds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brightness::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishSystemStat::_Internal {
 public:
};

PublishSystemStat::PublishSystemStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.PublishSystemStat)
}
PublishSystemStat::PublishSystemStat(const PublishSystemStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&periodsec_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(periodsec_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.PublishSystemStat)
}

void PublishSystemStat::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&periodsec_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(periodsec_));
}

PublishSystemStat::~PublishSystemStat() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.PublishSystemStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishSystemStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PublishSystemStat::ArenaDtor(void* object) {
  PublishSystemStat* _this = reinterpret_cast< PublishSystemStat* >(object);
  (void)_this;
}
void PublishSystemStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishSystemStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishSystemStat& PublishSystemStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishSystemStat_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void PublishSystemStat::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.PublishSystemStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&periodsec_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(periodsec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishSystemStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 PeriodSec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          periodsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishSystemStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.PublishSystemStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 PeriodSec = 2;
  if (this->periodsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_periodsec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.PublishSystemStat)
  return target;
}

size_t PublishSystemStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.PublishSystemStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 PeriodSec = 2;
  if (this->periodsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_periodsec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishSystemStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.PublishSystemStat)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishSystemStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishSystemStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.PublishSystemStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.PublishSystemStat)
    MergeFrom(*source);
  }
}

void PublishSystemStat::MergeFrom(const PublishSystemStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.PublishSystemStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.periodsec() != 0) {
    _internal_set_periodsec(from._internal_periodsec());
  }
}

void PublishSystemStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.PublishSystemStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishSystemStat::CopyFrom(const PublishSystemStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.PublishSystemStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishSystemStat::IsInitialized() const {
  return true;
}

void PublishSystemStat::InternalSwap(PublishSystemStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishSystemStat, periodsec_)
      + sizeof(PublishSystemStat::periodsec_)
      - PROTOBUF_FIELD_OFFSET(PublishSystemStat, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishSystemStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCState::_Internal {
 public:
  static const ::ibeam_rawpanel::HWCMode& hwcmode(const HWCState* msg);
  static const ::ibeam_rawpanel::HWCColor& hwccolor(const HWCState* msg);
  static const ::ibeam_rawpanel::HWCExtended& hwcextended(const HWCState* msg);
  static const ::ibeam_rawpanel::HWCText& hwctext(const HWCState* msg);
  static const ::ibeam_rawpanel::HWCGfx& hwcgfx(const HWCState* msg);
  static const ::ibeam_rawpanel::PublishRawADCValues& publishrawadcvalues(const HWCState* msg);
};

const ::ibeam_rawpanel::HWCMode&
HWCState::_Internal::hwcmode(const HWCState* msg) {
  return *msg->hwcmode_;
}
const ::ibeam_rawpanel::HWCColor&
HWCState::_Internal::hwccolor(const HWCState* msg) {
  return *msg->hwccolor_;
}
const ::ibeam_rawpanel::HWCExtended&
HWCState::_Internal::hwcextended(const HWCState* msg) {
  return *msg->hwcextended_;
}
const ::ibeam_rawpanel::HWCText&
HWCState::_Internal::hwctext(const HWCState* msg) {
  return *msg->hwctext_;
}
const ::ibeam_rawpanel::HWCGfx&
HWCState::_Internal::hwcgfx(const HWCState* msg) {
  return *msg->hwcgfx_;
}
const ::ibeam_rawpanel::PublishRawADCValues&
HWCState::_Internal::publishrawadcvalues(const HWCState* msg) {
  return *msg->publishrawadcvalues_;
}
HWCState::HWCState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hwcids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCState)
}
HWCState::HWCState(const HWCState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hwcids_(from.hwcids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hwcmode()) {
    hwcmode_ = new ::ibeam_rawpanel::HWCMode(*from.hwcmode_);
  } else {
    hwcmode_ = nullptr;
  }
  if (from._internal_has_hwccolor()) {
    hwccolor_ = new ::ibeam_rawpanel::HWCColor(*from.hwccolor_);
  } else {
    hwccolor_ = nullptr;
  }
  if (from._internal_has_hwcextended()) {
    hwcextended_ = new ::ibeam_rawpanel::HWCExtended(*from.hwcextended_);
  } else {
    hwcextended_ = nullptr;
  }
  if (from._internal_has_hwctext()) {
    hwctext_ = new ::ibeam_rawpanel::HWCText(*from.hwctext_);
  } else {
    hwctext_ = nullptr;
  }
  if (from._internal_has_hwcgfx()) {
    hwcgfx_ = new ::ibeam_rawpanel::HWCGfx(*from.hwcgfx_);
  } else {
    hwcgfx_ = nullptr;
  }
  if (from._internal_has_publishrawadcvalues()) {
    publishrawadcvalues_ = new ::ibeam_rawpanel::PublishRawADCValues(*from.publishrawadcvalues_);
  } else {
    publishrawadcvalues_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCState)
}

void HWCState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HWCState_ibeam_2drawpanel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hwcmode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&publishrawadcvalues_) -
      reinterpret_cast<char*>(&hwcmode_)) + sizeof(publishrawadcvalues_));
}

HWCState::~HWCState() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hwcmode_;
  if (this != internal_default_instance()) delete hwccolor_;
  if (this != internal_default_instance()) delete hwcextended_;
  if (this != internal_default_instance()) delete hwctext_;
  if (this != internal_default_instance()) delete hwcgfx_;
  if (this != internal_default_instance()) delete publishrawadcvalues_;
}

void HWCState::ArenaDtor(void* object) {
  HWCState* _this = reinterpret_cast< HWCState* >(object);
  (void)_this;
}
void HWCState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCState& HWCState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCState_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hwcids_.Clear();
  if (GetArena() == nullptr && hwcmode_ != nullptr) {
    delete hwcmode_;
  }
  hwcmode_ = nullptr;
  if (GetArena() == nullptr && hwccolor_ != nullptr) {
    delete hwccolor_;
  }
  hwccolor_ = nullptr;
  if (GetArena() == nullptr && hwcextended_ != nullptr) {
    delete hwcextended_;
  }
  hwcextended_ = nullptr;
  if (GetArena() == nullptr && hwctext_ != nullptr) {
    delete hwctext_;
  }
  hwctext_ = nullptr;
  if (GetArena() == nullptr && hwcgfx_ != nullptr) {
    delete hwcgfx_;
  }
  hwcgfx_ = nullptr;
  if (GetArena() == nullptr && publishrawadcvalues_ != nullptr) {
    delete publishrawadcvalues_;
  }
  publishrawadcvalues_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 HWCIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hwcids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_hwcids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCMode HWCMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hwcmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCColor HWCColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hwccolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCExtended HWCExtended = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hwcextended(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCText HWCText = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hwctext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCGfx HWCGfx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hwcgfx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.PublishRawADCValues PublishRawADCValues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_publishrawadcvalues(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 HWCIDs = 1;
  {
    int byte_size = _hwcids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_hwcids(), byte_size, target);
    }
  }

  // .ibeam_rawpanel.HWCMode HWCMode = 2;
  if (this->has_hwcmode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hwcmode(this), target, stream);
  }

  // .ibeam_rawpanel.HWCColor HWCColor = 3;
  if (this->has_hwccolor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hwccolor(this), target, stream);
  }

  // .ibeam_rawpanel.HWCExtended HWCExtended = 4;
  if (this->has_hwcextended()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hwcextended(this), target, stream);
  }

  // .ibeam_rawpanel.HWCText HWCText = 5;
  if (this->has_hwctext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hwctext(this), target, stream);
  }

  // .ibeam_rawpanel.HWCGfx HWCGfx = 6;
  if (this->has_hwcgfx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::hwcgfx(this), target, stream);
  }

  // .ibeam_rawpanel.PublishRawADCValues PublishRawADCValues = 7;
  if (this->has_publishrawadcvalues()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::publishrawadcvalues(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCState)
  return target;
}

size_t HWCState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 HWCIDs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hwcids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hwcids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .ibeam_rawpanel.HWCMode HWCMode = 2;
  if (this->has_hwcmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hwcmode_);
  }

  // .ibeam_rawpanel.HWCColor HWCColor = 3;
  if (this->has_hwccolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hwccolor_);
  }

  // .ibeam_rawpanel.HWCExtended HWCExtended = 4;
  if (this->has_hwcextended()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hwcextended_);
  }

  // .ibeam_rawpanel.HWCText HWCText = 5;
  if (this->has_hwctext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hwctext_);
  }

  // .ibeam_rawpanel.HWCGfx HWCGfx = 6;
  if (this->has_hwcgfx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hwcgfx_);
  }

  // .ibeam_rawpanel.PublishRawADCValues PublishRawADCValues = 7;
  if (this->has_publishrawadcvalues()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publishrawadcvalues_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCState)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCState)
    MergeFrom(*source);
  }
}

void HWCState::MergeFrom(const HWCState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hwcids_.MergeFrom(from.hwcids_);
  if (from.has_hwcmode()) {
    _internal_mutable_hwcmode()->::ibeam_rawpanel::HWCMode::MergeFrom(from._internal_hwcmode());
  }
  if (from.has_hwccolor()) {
    _internal_mutable_hwccolor()->::ibeam_rawpanel::HWCColor::MergeFrom(from._internal_hwccolor());
  }
  if (from.has_hwcextended()) {
    _internal_mutable_hwcextended()->::ibeam_rawpanel::HWCExtended::MergeFrom(from._internal_hwcextended());
  }
  if (from.has_hwctext()) {
    _internal_mutable_hwctext()->::ibeam_rawpanel::HWCText::MergeFrom(from._internal_hwctext());
  }
  if (from.has_hwcgfx()) {
    _internal_mutable_hwcgfx()->::ibeam_rawpanel::HWCGfx::MergeFrom(from._internal_hwcgfx());
  }
  if (from.has_publishrawadcvalues()) {
    _internal_mutable_publishrawadcvalues()->::ibeam_rawpanel::PublishRawADCValues::MergeFrom(from._internal_publishrawadcvalues());
  }
}

void HWCState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCState::CopyFrom(const HWCState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCState::IsInitialized() const {
  return true;
}

void HWCState::InternalSwap(HWCState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hwcids_.InternalSwap(&other->hwcids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCState, publishrawadcvalues_)
      + sizeof(HWCState::publishrawadcvalues_)
      - PROTOBUF_FIELD_OFFSET(HWCState, hwcmode_)>(
          reinterpret_cast<char*>(&hwcmode_),
          reinterpret_cast<char*>(&other->hwcmode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishRawADCValues::_Internal {
 public:
};

PublishRawADCValues::PublishRawADCValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.PublishRawADCValues)
}
PublishRawADCValues::PublishRawADCValues(const PublishRawADCValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.PublishRawADCValues)
}

void PublishRawADCValues::SharedCtor() {
  enabled_ = false;
}

PublishRawADCValues::~PublishRawADCValues() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.PublishRawADCValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishRawADCValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PublishRawADCValues::ArenaDtor(void* object) {
  PublishRawADCValues* _this = reinterpret_cast< PublishRawADCValues* >(object);
  (void)_this;
}
void PublishRawADCValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishRawADCValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishRawADCValues& PublishRawADCValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishRawADCValues_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void PublishRawADCValues::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.PublishRawADCValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishRawADCValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishRawADCValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.PublishRawADCValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.PublishRawADCValues)
  return target;
}

size_t PublishRawADCValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.PublishRawADCValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishRawADCValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.PublishRawADCValues)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRawADCValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishRawADCValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.PublishRawADCValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.PublishRawADCValues)
    MergeFrom(*source);
  }
}

void PublishRawADCValues::MergeFrom(const PublishRawADCValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.PublishRawADCValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void PublishRawADCValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.PublishRawADCValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRawADCValues::CopyFrom(const PublishRawADCValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.PublishRawADCValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRawADCValues::IsInitialized() const {
  return true;
}

void PublishRawADCValues::InternalSwap(PublishRawADCValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishRawADCValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCMode::_Internal {
 public:
};

HWCMode::HWCMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCMode)
}
HWCMode::HWCMode(const HWCMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&state_)) + sizeof(output_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCMode)
}

void HWCMode::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&state_)) + sizeof(output_));
}

HWCMode::~HWCMode() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HWCMode::ArenaDtor(void* object) {
  HWCMode* _this = reinterpret_cast< HWCMode* >(object);
  (void)_this;
}
void HWCMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCMode& HWCMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCMode_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCMode::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&state_)) + sizeof(output_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.HWCMode.StateE State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ibeam_rawpanel::HWCMode_StateE>(val));
        } else goto handle_unusual;
        continue;
      // uint32 BlinkPattern = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blinkpattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCMode.StateE State = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // uint32 BlinkPattern = 3;
  if (this->blinkpattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blinkpattern(), target);
  }

  // bool Output = 4;
  if (this->output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCMode)
  return target;
}

size_t HWCMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCMode.StateE State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint32 BlinkPattern = 3;
  if (this->blinkpattern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blinkpattern());
  }

  // bool Output = 4;
  if (this->output() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCMode)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCMode)
    MergeFrom(*source);
  }
}

void HWCMode::MergeFrom(const HWCMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.blinkpattern() != 0) {
    _internal_set_blinkpattern(from._internal_blinkpattern());
  }
  if (from.output() != 0) {
    _internal_set_output(from._internal_output());
  }
}

void HWCMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCMode::CopyFrom(const HWCMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCMode::IsInitialized() const {
  return true;
}

void HWCMode::InternalSwap(HWCMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCMode, output_)
      + sizeof(HWCMode::output_)
      - PROTOBUF_FIELD_OFFSET(HWCMode, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCExtended::_Internal {
 public:
};

HWCExtended::HWCExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCExtended)
}
HWCExtended::HWCExtended(const HWCExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interpretation_, &from.interpretation_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&interpretation_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCExtended)
}

void HWCExtended::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&interpretation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&interpretation_)) + sizeof(value_));
}

HWCExtended::~HWCExtended() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HWCExtended::ArenaDtor(void* object) {
  HWCExtended* _this = reinterpret_cast< HWCExtended* >(object);
  (void)_this;
}
void HWCExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCExtended& HWCExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCExtended_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interpretation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&interpretation_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.HWCExtended.InterpretationE Interpretation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interpretation(static_cast<::ibeam_rawpanel::HWCExtended_InterpretationE>(val));
        } else goto handle_unusual;
        continue;
      // uint32 Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCExtended.InterpretationE Interpretation = 2;
  if (this->interpretation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_interpretation(), target);
  }

  // uint32 Value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCExtended)
  return target;
}

size_t HWCExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCExtended.InterpretationE Interpretation = 2;
  if (this->interpretation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interpretation());
  }

  // uint32 Value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCExtended)
    MergeFrom(*source);
  }
}

void HWCExtended::MergeFrom(const HWCExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interpretation() != 0) {
    _internal_set_interpretation(from._internal_interpretation());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void HWCExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCExtended::CopyFrom(const HWCExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCExtended::IsInitialized() const {
  return true;
}

void HWCExtended::InternalSwap(HWCExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCExtended, value_)
      + sizeof(HWCExtended::value_)
      - PROTOBUF_FIELD_OFFSET(HWCExtended, interpretation_)>(
          reinterpret_cast<char*>(&interpretation_),
          reinterpret_cast<char*>(&other->interpretation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCColor::_Internal {
 public:
  static const ::ibeam_rawpanel::ColorRGB& colorrgb(const HWCColor* msg);
  static const ::ibeam_rawpanel::ColorIndex& colorindex(const HWCColor* msg);
};

const ::ibeam_rawpanel::ColorRGB&
HWCColor::_Internal::colorrgb(const HWCColor* msg) {
  return *msg->colorrgb_;
}
const ::ibeam_rawpanel::ColorIndex&
HWCColor::_Internal::colorindex(const HWCColor* msg) {
  return *msg->colorindex_;
}
HWCColor::HWCColor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCColor)
}
HWCColor::HWCColor(const HWCColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_colorrgb()) {
    colorrgb_ = new ::ibeam_rawpanel::ColorRGB(*from.colorrgb_);
  } else {
    colorrgb_ = nullptr;
  }
  if (from._internal_has_colorindex()) {
    colorindex_ = new ::ibeam_rawpanel::ColorIndex(*from.colorindex_);
  } else {
    colorindex_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCColor)
}

void HWCColor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HWCColor_ibeam_2drawpanel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&colorrgb_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&colorindex_) -
      reinterpret_cast<char*>(&colorrgb_)) + sizeof(colorindex_));
}

HWCColor::~HWCColor() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCColor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCColor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete colorrgb_;
  if (this != internal_default_instance()) delete colorindex_;
}

void HWCColor::ArenaDtor(void* object) {
  HWCColor* _this = reinterpret_cast< HWCColor* >(object);
  (void)_this;
}
void HWCColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCColor& HWCColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCColor_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCColor::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && colorrgb_ != nullptr) {
    delete colorrgb_;
  }
  colorrgb_ = nullptr;
  if (GetArena() == nullptr && colorindex_ != nullptr) {
    delete colorindex_;
  }
  colorindex_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.ColorRGB ColorRGB = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorrgb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.ColorIndex ColorIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.ColorRGB ColorRGB = 1;
  if (this->has_colorrgb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::colorrgb(this), target, stream);
  }

  // .ibeam_rawpanel.ColorIndex ColorIndex = 2;
  if (this->has_colorindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::colorindex(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCColor)
  return target;
}

size_t HWCColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.ColorRGB ColorRGB = 1;
  if (this->has_colorrgb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *colorrgb_);
  }

  // .ibeam_rawpanel.ColorIndex ColorIndex = 2;
  if (this->has_colorindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *colorindex_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCColor)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCColor)
    MergeFrom(*source);
  }
}

void HWCColor::MergeFrom(const HWCColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_colorrgb()) {
    _internal_mutable_colorrgb()->::ibeam_rawpanel::ColorRGB::MergeFrom(from._internal_colorrgb());
  }
  if (from.has_colorindex()) {
    _internal_mutable_colorindex()->::ibeam_rawpanel::ColorIndex::MergeFrom(from._internal_colorindex());
  }
}

void HWCColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCColor::CopyFrom(const HWCColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCColor::IsInitialized() const {
  return true;
}

void HWCColor::InternalSwap(HWCColor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCColor, colorindex_)
      + sizeof(HWCColor::colorindex_)
      - PROTOBUF_FIELD_OFFSET(HWCColor, colorrgb_)>(
          reinterpret_cast<char*>(&colorrgb_),
          reinterpret_cast<char*>(&other->colorrgb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Color::_Internal {
 public:
  static const ::ibeam_rawpanel::ColorRGB& colorrgb(const Color* msg);
  static const ::ibeam_rawpanel::ColorIndex& colorindex(const Color* msg);
};

const ::ibeam_rawpanel::ColorRGB&
Color::_Internal::colorrgb(const Color* msg) {
  return *msg->colorrgb_;
}
const ::ibeam_rawpanel::ColorIndex&
Color::_Internal::colorindex(const Color* msg) {
  return *msg->colorindex_;
}
Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_colorrgb()) {
    colorrgb_ = new ::ibeam_rawpanel::ColorRGB(*from.colorrgb_);
  } else {
    colorrgb_ = nullptr;
  }
  if (from._internal_has_colorindex()) {
    colorindex_ = new ::ibeam_rawpanel::ColorIndex(*from.colorindex_);
  } else {
    colorindex_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.Color)
}

void Color::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Color_ibeam_2drawpanel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&colorrgb_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&colorindex_) -
      reinterpret_cast<char*>(&colorrgb_)) + sizeof(colorindex_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete colorrgb_;
  if (this != internal_default_instance()) delete colorindex_;
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && colorrgb_ != nullptr) {
    delete colorrgb_;
  }
  colorrgb_ = nullptr;
  if (GetArena() == nullptr && colorindex_ != nullptr) {
    delete colorindex_;
  }
  colorindex_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.ColorRGB ColorRGB = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorrgb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.ColorIndex ColorIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.ColorRGB ColorRGB = 1;
  if (this->has_colorrgb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::colorrgb(this), target, stream);
  }

  // .ibeam_rawpanel.ColorIndex ColorIndex = 2;
  if (this->has_colorindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::colorindex(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.ColorRGB ColorRGB = 1;
  if (this->has_colorrgb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *colorrgb_);
  }

  // .ibeam_rawpanel.ColorIndex ColorIndex = 2;
  if (this->has_colorindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *colorindex_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_colorrgb()) {
    _internal_mutable_colorrgb()->::ibeam_rawpanel::ColorRGB::MergeFrom(from._internal_colorrgb());
  }
  if (from.has_colorindex()) {
    _internal_mutable_colorindex()->::ibeam_rawpanel::ColorIndex::MergeFrom(from._internal_colorindex());
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, colorindex_)
      + sizeof(Color::colorindex_)
      - PROTOBUF_FIELD_OFFSET(Color, colorrgb_)>(
          reinterpret_cast<char*>(&colorrgb_),
          reinterpret_cast<char*>(&other->colorrgb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ColorRGB::_Internal {
 public:
};

ColorRGB::ColorRGB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.ColorRGB)
}
ColorRGB::ColorRGB(const ColorRGB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.ColorRGB)
}

void ColorRGB::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&red_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

ColorRGB::~ColorRGB() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.ColorRGB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColorRGB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ColorRGB::ArenaDtor(void* object) {
  ColorRGB* _this = reinterpret_cast< ColorRGB* >(object);
  (void)_this;
}
void ColorRGB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorRGB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorRGB& ColorRGB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorRGB_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void ColorRGB::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.ColorRGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorRGB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorRGB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.ColorRGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Red = 1;
  if (this->red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_red(), target);
  }

  // uint32 Green = 2;
  if (this->green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_green(), target);
  }

  // uint32 Blue = 3;
  if (this->blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.ColorRGB)
  return target;
}

size_t ColorRGB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.ColorRGB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Red = 1;
  if (this->red() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_red());
  }

  // uint32 Green = 2;
  if (this->green() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_green());
  }

  // uint32 Blue = 3;
  if (this->blue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorRGB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.ColorRGB)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorRGB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorRGB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.ColorRGB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.ColorRGB)
    MergeFrom(*source);
  }
}

void ColorRGB::MergeFrom(const ColorRGB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.ColorRGB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    _internal_set_red(from._internal_red());
  }
  if (from.green() != 0) {
    _internal_set_green(from._internal_green());
  }
  if (from.blue() != 0) {
    _internal_set_blue(from._internal_blue());
  }
}

void ColorRGB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.ColorRGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorRGB::CopyFrom(const ColorRGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.ColorRGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorRGB::IsInitialized() const {
  return true;
}

void ColorRGB::InternalSwap(ColorRGB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorRGB, blue_)
      + sizeof(ColorRGB::blue_)
      - PROTOBUF_FIELD_OFFSET(ColorRGB, red_)>(
          reinterpret_cast<char*>(&red_),
          reinterpret_cast<char*>(&other->red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorRGB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ColorIndex::_Internal {
 public:
};

ColorIndex::ColorIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.ColorIndex)
}
ColorIndex::ColorIndex(const ColorIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.ColorIndex)
}

void ColorIndex::SharedCtor() {
  index_ = 0;
}

ColorIndex::~ColorIndex() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.ColorIndex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColorIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ColorIndex::ArenaDtor(void* object) {
  ColorIndex* _this = reinterpret_cast< ColorIndex* >(object);
  (void)_this;
}
void ColorIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorIndex& ColorIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorIndex_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void ColorIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.ColorIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.ColorIndex.Colors Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::ibeam_rawpanel::ColorIndex_Colors>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.ColorIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.ColorIndex.Colors Index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.ColorIndex)
  return target;
}

size_t ColorIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.ColorIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.ColorIndex.Colors Index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.ColorIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.ColorIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.ColorIndex)
    MergeFrom(*source);
  }
}

void ColorIndex::MergeFrom(const ColorIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.ColorIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ColorIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.ColorIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorIndex::CopyFrom(const ColorIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.ColorIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorIndex::IsInitialized() const {
  return true;
}

void ColorIndex::InternalSwap(ColorIndex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCText_ScaleM::_Internal {
 public:
};

HWCText_ScaleM::HWCText_ScaleM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCText.ScaleM)
}
HWCText_ScaleM::HWCText_ScaleM(const HWCText_ScaleM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scaletype_, &from.scaletype_,
    static_cast<size_t>(reinterpret_cast<char*>(&limithigh_) -
    reinterpret_cast<char*>(&scaletype_)) + sizeof(limithigh_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCText.ScaleM)
}

void HWCText_ScaleM::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scaletype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limithigh_) -
      reinterpret_cast<char*>(&scaletype_)) + sizeof(limithigh_));
}

HWCText_ScaleM::~HWCText_ScaleM() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCText.ScaleM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCText_ScaleM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HWCText_ScaleM::ArenaDtor(void* object) {
  HWCText_ScaleM* _this = reinterpret_cast< HWCText_ScaleM* >(object);
  (void)_this;
}
void HWCText_ScaleM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCText_ScaleM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCText_ScaleM& HWCText_ScaleM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCText_ScaleM_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCText_ScaleM::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCText.ScaleM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scaletype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limithigh_) -
      reinterpret_cast<char*>(&scaletype_)) + sizeof(limithigh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCText_ScaleM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.HWCText.ScaleM.ScaleTypeE ScaleType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scaletype(static_cast<::ibeam_rawpanel::HWCText_ScaleM_ScaleTypeE>(val));
        } else goto handle_unusual;
        continue;
      // sint32 RangeLow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rangelow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 RangeHigh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rangehigh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 LimitLow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limitlow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 LimitHigh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          limithigh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCText_ScaleM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCText.ScaleM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCText.ScaleM.ScaleTypeE ScaleType = 1;
  if (this->scaletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scaletype(), target);
  }

  // sint32 RangeLow = 2;
  if (this->rangelow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_rangelow(), target);
  }

  // sint32 RangeHigh = 3;
  if (this->rangehigh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_rangehigh(), target);
  }

  // sint32 LimitLow = 4;
  if (this->limitlow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_limitlow(), target);
  }

  // sint32 LimitHigh = 5;
  if (this->limithigh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_limithigh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCText.ScaleM)
  return target;
}

size_t HWCText_ScaleM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCText.ScaleM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCText.ScaleM.ScaleTypeE ScaleType = 1;
  if (this->scaletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scaletype());
  }

  // sint32 RangeLow = 2;
  if (this->rangelow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_rangelow());
  }

  // sint32 RangeHigh = 3;
  if (this->rangehigh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_rangehigh());
  }

  // sint32 LimitLow = 4;
  if (this->limitlow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_limitlow());
  }

  // sint32 LimitHigh = 5;
  if (this->limithigh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_limithigh());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCText_ScaleM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCText.ScaleM)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCText_ScaleM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCText_ScaleM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCText.ScaleM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCText.ScaleM)
    MergeFrom(*source);
  }
}

void HWCText_ScaleM::MergeFrom(const HWCText_ScaleM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCText.ScaleM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scaletype() != 0) {
    _internal_set_scaletype(from._internal_scaletype());
  }
  if (from.rangelow() != 0) {
    _internal_set_rangelow(from._internal_rangelow());
  }
  if (from.rangehigh() != 0) {
    _internal_set_rangehigh(from._internal_rangehigh());
  }
  if (from.limitlow() != 0) {
    _internal_set_limitlow(from._internal_limitlow());
  }
  if (from.limithigh() != 0) {
    _internal_set_limithigh(from._internal_limithigh());
  }
}

void HWCText_ScaleM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCText.ScaleM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCText_ScaleM::CopyFrom(const HWCText_ScaleM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCText.ScaleM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCText_ScaleM::IsInitialized() const {
  return true;
}

void HWCText_ScaleM::InternalSwap(HWCText_ScaleM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCText_ScaleM, limithigh_)
      + sizeof(HWCText_ScaleM::limithigh_)
      - PROTOBUF_FIELD_OFFSET(HWCText_ScaleM, scaletype_)>(
          reinterpret_cast<char*>(&scaletype_),
          reinterpret_cast<char*>(&other->scaletype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCText_ScaleM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCText_TextStyle_Font::_Internal {
 public:
};

HWCText_TextStyle_Font::HWCText_TextStyle_Font(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCText.TextStyle.Font)
}
HWCText_TextStyle_Font::HWCText_TextStyle_Font(const HWCText_TextStyle_Font& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fontface_, &from.fontface_,
    static_cast<size_t>(reinterpret_cast<char*>(&textwidth_) -
    reinterpret_cast<char*>(&fontface_)) + sizeof(textwidth_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCText.TextStyle.Font)
}

void HWCText_TextStyle_Font::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fontface_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&textwidth_) -
      reinterpret_cast<char*>(&fontface_)) + sizeof(textwidth_));
}

HWCText_TextStyle_Font::~HWCText_TextStyle_Font() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCText.TextStyle.Font)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCText_TextStyle_Font::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HWCText_TextStyle_Font::ArenaDtor(void* object) {
  HWCText_TextStyle_Font* _this = reinterpret_cast< HWCText_TextStyle_Font* >(object);
  (void)_this;
}
void HWCText_TextStyle_Font::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCText_TextStyle_Font::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCText_TextStyle_Font& HWCText_TextStyle_Font::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCText_TextStyle_Font_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCText_TextStyle_Font::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCText.TextStyle.Font)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fontface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&textwidth_) -
      reinterpret_cast<char*>(&fontface_)) + sizeof(textwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCText_TextStyle_Font::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.HWCText.TextStyle.Font.FontFaceE FontFace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fontface(static_cast<::ibeam_rawpanel::HWCText_TextStyle_Font_FontFaceE>(val));
        } else goto handle_unusual;
        continue;
      // uint32 TextHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          textheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TextWidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          textwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCText_TextStyle_Font::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCText.TextStyle.Font)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCText.TextStyle.Font.FontFaceE FontFace = 1;
  if (this->fontface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_fontface(), target);
  }

  // uint32 TextHeight = 2;
  if (this->textheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_textheight(), target);
  }

  // uint32 TextWidth = 3;
  if (this->textwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_textwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCText.TextStyle.Font)
  return target;
}

size_t HWCText_TextStyle_Font::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCText.TextStyle.Font)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCText.TextStyle.Font.FontFaceE FontFace = 1;
  if (this->fontface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fontface());
  }

  // uint32 TextHeight = 2;
  if (this->textheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_textheight());
  }

  // uint32 TextWidth = 3;
  if (this->textwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_textwidth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCText_TextStyle_Font::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCText.TextStyle.Font)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCText_TextStyle_Font* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCText_TextStyle_Font>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCText.TextStyle.Font)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCText.TextStyle.Font)
    MergeFrom(*source);
  }
}

void HWCText_TextStyle_Font::MergeFrom(const HWCText_TextStyle_Font& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCText.TextStyle.Font)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fontface() != 0) {
    _internal_set_fontface(from._internal_fontface());
  }
  if (from.textheight() != 0) {
    _internal_set_textheight(from._internal_textheight());
  }
  if (from.textwidth() != 0) {
    _internal_set_textwidth(from._internal_textwidth());
  }
}

void HWCText_TextStyle_Font::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCText.TextStyle.Font)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCText_TextStyle_Font::CopyFrom(const HWCText_TextStyle_Font& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCText.TextStyle.Font)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCText_TextStyle_Font::IsInitialized() const {
  return true;
}

void HWCText_TextStyle_Font::InternalSwap(HWCText_TextStyle_Font* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCText_TextStyle_Font, textwidth_)
      + sizeof(HWCText_TextStyle_Font::textwidth_)
      - PROTOBUF_FIELD_OFFSET(HWCText_TextStyle_Font, fontface_)>(
          reinterpret_cast<char*>(&fontface_),
          reinterpret_cast<char*>(&other->fontface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCText_TextStyle_Font::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCText_TextStyle::_Internal {
 public:
  static const ::ibeam_rawpanel::HWCText_TextStyle_Font& titlefont(const HWCText_TextStyle* msg);
  static const ::ibeam_rawpanel::HWCText_TextStyle_Font& textfont(const HWCText_TextStyle* msg);
};

const ::ibeam_rawpanel::HWCText_TextStyle_Font&
HWCText_TextStyle::_Internal::titlefont(const HWCText_TextStyle* msg) {
  return *msg->titlefont_;
}
const ::ibeam_rawpanel::HWCText_TextStyle_Font&
HWCText_TextStyle::_Internal::textfont(const HWCText_TextStyle* msg) {
  return *msg->textfont_;
}
HWCText_TextStyle::HWCText_TextStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCText.TextStyle)
}
HWCText_TextStyle::HWCText_TextStyle(const HWCText_TextStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_titlefont()) {
    titlefont_ = new ::ibeam_rawpanel::HWCText_TextStyle_Font(*from.titlefont_);
  } else {
    titlefont_ = nullptr;
  }
  if (from._internal_has_textfont()) {
    textfont_ = new ::ibeam_rawpanel::HWCText_TextStyle_Font(*from.textfont_);
  } else {
    textfont_ = nullptr;
  }
  ::memcpy(&fixedwidth_, &from.fixedwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&unformattedfontsize_) -
    reinterpret_cast<char*>(&fixedwidth_)) + sizeof(unformattedfontsize_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCText.TextStyle)
}

void HWCText_TextStyle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HWCText_TextStyle_ibeam_2drawpanel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&titlefont_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&unformattedfontsize_) -
      reinterpret_cast<char*>(&titlefont_)) + sizeof(unformattedfontsize_));
}

HWCText_TextStyle::~HWCText_TextStyle() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCText.TextStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCText_TextStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete titlefont_;
  if (this != internal_default_instance()) delete textfont_;
}

void HWCText_TextStyle::ArenaDtor(void* object) {
  HWCText_TextStyle* _this = reinterpret_cast< HWCText_TextStyle* >(object);
  (void)_this;
}
void HWCText_TextStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCText_TextStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCText_TextStyle& HWCText_TextStyle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCText_TextStyle_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCText_TextStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCText.TextStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && titlefont_ != nullptr) {
    delete titlefont_;
  }
  titlefont_ = nullptr;
  if (GetArena() == nullptr && textfont_ != nullptr) {
    delete textfont_;
  }
  textfont_ = nullptr;
  ::memset(&fixedwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unformattedfontsize_) -
      reinterpret_cast<char*>(&fixedwidth_)) + sizeof(unformattedfontsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCText_TextStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.HWCText.TextStyle.Font TitleFont = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_titlefont(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCText.TextStyle.Font TextFont = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_textfont(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool FixedWidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fixedwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TitleBarPadding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          titlebarpadding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ExtraCharacterSpacing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          extracharacterspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 UnformattedFontSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          unformattedfontsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCText_TextStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCText.TextStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCText.TextStyle.Font TitleFont = 1;
  if (this->has_titlefont()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::titlefont(this), target, stream);
  }

  // .ibeam_rawpanel.HWCText.TextStyle.Font TextFont = 2;
  if (this->has_textfont()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::textfont(this), target, stream);
  }

  // bool FixedWidth = 3;
  if (this->fixedwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_fixedwidth(), target);
  }

  // uint32 TitleBarPadding = 4;
  if (this->titlebarpadding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_titlebarpadding(), target);
  }

  // uint32 ExtraCharacterSpacing = 5;
  if (this->extracharacterspacing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_extracharacterspacing(), target);
  }

  // uint32 UnformattedFontSize = 6;
  if (this->unformattedfontsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_unformattedfontsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCText.TextStyle)
  return target;
}

size_t HWCText_TextStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCText.TextStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCText.TextStyle.Font TitleFont = 1;
  if (this->has_titlefont()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *titlefont_);
  }

  // .ibeam_rawpanel.HWCText.TextStyle.Font TextFont = 2;
  if (this->has_textfont()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *textfont_);
  }

  // bool FixedWidth = 3;
  if (this->fixedwidth() != 0) {
    total_size += 1 + 1;
  }

  // uint32 TitleBarPadding = 4;
  if (this->titlebarpadding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_titlebarpadding());
  }

  // uint32 ExtraCharacterSpacing = 5;
  if (this->extracharacterspacing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extracharacterspacing());
  }

  // uint32 UnformattedFontSize = 6;
  if (this->unformattedfontsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unformattedfontsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCText_TextStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCText.TextStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCText_TextStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCText_TextStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCText.TextStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCText.TextStyle)
    MergeFrom(*source);
  }
}

void HWCText_TextStyle::MergeFrom(const HWCText_TextStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCText.TextStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_titlefont()) {
    _internal_mutable_titlefont()->::ibeam_rawpanel::HWCText_TextStyle_Font::MergeFrom(from._internal_titlefont());
  }
  if (from.has_textfont()) {
    _internal_mutable_textfont()->::ibeam_rawpanel::HWCText_TextStyle_Font::MergeFrom(from._internal_textfont());
  }
  if (from.fixedwidth() != 0) {
    _internal_set_fixedwidth(from._internal_fixedwidth());
  }
  if (from.titlebarpadding() != 0) {
    _internal_set_titlebarpadding(from._internal_titlebarpadding());
  }
  if (from.extracharacterspacing() != 0) {
    _internal_set_extracharacterspacing(from._internal_extracharacterspacing());
  }
  if (from.unformattedfontsize() != 0) {
    _internal_set_unformattedfontsize(from._internal_unformattedfontsize());
  }
}

void HWCText_TextStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCText.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCText_TextStyle::CopyFrom(const HWCText_TextStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCText.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCText_TextStyle::IsInitialized() const {
  return true;
}

void HWCText_TextStyle::InternalSwap(HWCText_TextStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCText_TextStyle, unformattedfontsize_)
      + sizeof(HWCText_TextStyle::unformattedfontsize_)
      - PROTOBUF_FIELD_OFFSET(HWCText_TextStyle, titlefont_)>(
          reinterpret_cast<char*>(&titlefont_),
          reinterpret_cast<char*>(&other->titlefont_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCText_TextStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCText::_Internal {
 public:
  static const ::ibeam_rawpanel::HWCText_ScaleM& scale(const HWCText* msg);
  static const ::ibeam_rawpanel::HWCText_TextStyle& textstyling(const HWCText* msg);
  static const ::ibeam_rawpanel::Color& pixelcolor(const HWCText* msg);
  static const ::ibeam_rawpanel::Color& backgroundcolor(const HWCText* msg);
};

const ::ibeam_rawpanel::HWCText_ScaleM&
HWCText::_Internal::scale(const HWCText* msg) {
  return *msg->scale_;
}
const ::ibeam_rawpanel::HWCText_TextStyle&
HWCText::_Internal::textstyling(const HWCText* msg) {
  return *msg->textstyling_;
}
const ::ibeam_rawpanel::Color&
HWCText::_Internal::pixelcolor(const HWCText* msg) {
  return *msg->pixelcolor_;
}
const ::ibeam_rawpanel::Color&
HWCText::_Internal::backgroundcolor(const HWCText* msg) {
  return *msg->backgroundcolor_;
}
HWCText::HWCText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCText)
}
HWCText::HWCText(const HWCText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  textline1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_textline1().empty()) {
    textline1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_textline1(), 
      GetArena());
  }
  textline2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_textline2().empty()) {
    textline2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_textline2(), 
      GetArena());
  }
  if (from._internal_has_scale()) {
    scale_ = new ::ibeam_rawpanel::HWCText_ScaleM(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_textstyling()) {
    textstyling_ = new ::ibeam_rawpanel::HWCText_TextStyle(*from.textstyling_);
  } else {
    textstyling_ = nullptr;
  }
  if (from._internal_has_pixelcolor()) {
    pixelcolor_ = new ::ibeam_rawpanel::Color(*from.pixelcolor_);
  } else {
    pixelcolor_ = nullptr;
  }
  if (from._internal_has_backgroundcolor()) {
    backgroundcolor_ = new ::ibeam_rawpanel::Color(*from.backgroundcolor_);
  } else {
    backgroundcolor_ = nullptr;
  }
  ::memcpy(&integervalue_, &from.integervalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&pairmode_) -
    reinterpret_cast<char*>(&integervalue_)) + sizeof(pairmode_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCText)
}

void HWCText::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HWCText_ibeam_2drawpanel_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  textline1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  textline2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pairmode_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(pairmode_));
}

HWCText::~HWCText() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  textline1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  textline2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete textstyling_;
  if (this != internal_default_instance()) delete pixelcolor_;
  if (this != internal_default_instance()) delete backgroundcolor_;
}

void HWCText::ArenaDtor(void* object) {
  HWCText* _this = reinterpret_cast< HWCText* >(object);
  (void)_this;
}
void HWCText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCText& HWCText::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCText_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCText::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  textline1_.ClearToEmpty();
  textline2_.ClearToEmpty();
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArena() == nullptr && textstyling_ != nullptr) {
    delete textstyling_;
  }
  textstyling_ = nullptr;
  if (GetArena() == nullptr && pixelcolor_ != nullptr) {
    delete pixelcolor_;
  }
  pixelcolor_ = nullptr;
  if (GetArena() == nullptr && backgroundcolor_ != nullptr) {
    delete backgroundcolor_;
  }
  backgroundcolor_ = nullptr;
  ::memset(&integervalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pairmode_) -
      reinterpret_cast<char*>(&integervalue_)) + sizeof(pairmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 IntegerValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          integervalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCText.FormattingE Formatting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_formatting(static_cast<::ibeam_rawpanel::HWCText_FormattingE>(val));
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCText.StateIconE StateIcon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stateicon(static_cast<::ibeam_rawpanel::HWCText_StateIconE>(val));
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCText.ModifierIconE ModifierIcon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_modifiericon(static_cast<::ibeam_rawpanel::HWCText_ModifierIconE>(val));
        } else goto handle_unusual;
        continue;
      // string Title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.HWCText.Title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool SolidHeaderBar = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          solidheaderbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Textline1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_textline1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.HWCText.Textline1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Textline2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_textline2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.HWCText.Textline2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 IntegerValue2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          integervalue2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCText.PairModeE PairMode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pairmode(static_cast<::ibeam_rawpanel::HWCText_PairModeE>(val));
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCText.ScaleM Scale = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.HWCText.TextStyle TextStyling = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_textstyling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Inverted = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.Color PixelColor = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_pixelcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.Color BackgroundColor = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_backgroundcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 IntegerValue = 2;
  if (this->integervalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_integervalue(), target);
  }

  // .ibeam_rawpanel.HWCText.FormattingE Formatting = 3;
  if (this->formatting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_formatting(), target);
  }

  // .ibeam_rawpanel.HWCText.StateIconE StateIcon = 5;
  if (this->stateicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_stateicon(), target);
  }

  // .ibeam_rawpanel.HWCText.ModifierIconE ModifierIcon = 6;
  if (this->modifiericon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_modifiericon(), target);
  }

  // string Title = 7;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.HWCText.Title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // bool SolidHeaderBar = 8;
  if (this->solidheaderbar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_solidheaderbar(), target);
  }

  // string Textline1 = 9;
  if (this->textline1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_textline1().data(), static_cast<int>(this->_internal_textline1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.HWCText.Textline1");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_textline1(), target);
  }

  // string Textline2 = 10;
  if (this->textline2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_textline2().data(), static_cast<int>(this->_internal_textline2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.HWCText.Textline2");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_textline2(), target);
  }

  // sint32 IntegerValue2 = 11;
  if (this->integervalue2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_integervalue2(), target);
  }

  // .ibeam_rawpanel.HWCText.PairModeE PairMode = 12;
  if (this->pairmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_pairmode(), target);
  }

  // .ibeam_rawpanel.HWCText.ScaleM Scale = 13;
  if (this->has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::scale(this), target, stream);
  }

  // .ibeam_rawpanel.HWCText.TextStyle TextStyling = 14;
  if (this->has_textstyling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::textstyling(this), target, stream);
  }

  // bool Inverted = 15;
  if (this->inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_inverted(), target);
  }

  // .ibeam_rawpanel.Color PixelColor = 16;
  if (this->has_pixelcolor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::pixelcolor(this), target, stream);
  }

  // .ibeam_rawpanel.Color BackgroundColor = 17;
  if (this->has_backgroundcolor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::backgroundcolor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCText)
  return target;
}

size_t HWCText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Title = 7;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Textline1 = 9;
  if (this->textline1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_textline1());
  }

  // string Textline2 = 10;
  if (this->textline2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_textline2());
  }

  // .ibeam_rawpanel.HWCText.ScaleM Scale = 13;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .ibeam_rawpanel.HWCText.TextStyle TextStyling = 14;
  if (this->has_textstyling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *textstyling_);
  }

  // .ibeam_rawpanel.Color PixelColor = 16;
  if (this->has_pixelcolor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pixelcolor_);
  }

  // .ibeam_rawpanel.Color BackgroundColor = 17;
  if (this->has_backgroundcolor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *backgroundcolor_);
  }

  // sint32 IntegerValue = 2;
  if (this->integervalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_integervalue());
  }

  // .ibeam_rawpanel.HWCText.FormattingE Formatting = 3;
  if (this->formatting() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_formatting());
  }

  // .ibeam_rawpanel.HWCText.StateIconE StateIcon = 5;
  if (this->stateicon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stateicon());
  }

  // .ibeam_rawpanel.HWCText.ModifierIconE ModifierIcon = 6;
  if (this->modifiericon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modifiericon());
  }

  // sint32 IntegerValue2 = 11;
  if (this->integervalue2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_integervalue2());
  }

  // bool SolidHeaderBar = 8;
  if (this->solidheaderbar() != 0) {
    total_size += 1 + 1;
  }

  // bool Inverted = 15;
  if (this->inverted() != 0) {
    total_size += 1 + 1;
  }

  // .ibeam_rawpanel.HWCText.PairModeE PairMode = 12;
  if (this->pairmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pairmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCText)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCText)
    MergeFrom(*source);
  }
}

void HWCText::MergeFrom(const HWCText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.textline1().size() > 0) {
    _internal_set_textline1(from._internal_textline1());
  }
  if (from.textline2().size() > 0) {
    _internal_set_textline2(from._internal_textline2());
  }
  if (from.has_scale()) {
    _internal_mutable_scale()->::ibeam_rawpanel::HWCText_ScaleM::MergeFrom(from._internal_scale());
  }
  if (from.has_textstyling()) {
    _internal_mutable_textstyling()->::ibeam_rawpanel::HWCText_TextStyle::MergeFrom(from._internal_textstyling());
  }
  if (from.has_pixelcolor()) {
    _internal_mutable_pixelcolor()->::ibeam_rawpanel::Color::MergeFrom(from._internal_pixelcolor());
  }
  if (from.has_backgroundcolor()) {
    _internal_mutable_backgroundcolor()->::ibeam_rawpanel::Color::MergeFrom(from._internal_backgroundcolor());
  }
  if (from.integervalue() != 0) {
    _internal_set_integervalue(from._internal_integervalue());
  }
  if (from.formatting() != 0) {
    _internal_set_formatting(from._internal_formatting());
  }
  if (from.stateicon() != 0) {
    _internal_set_stateicon(from._internal_stateicon());
  }
  if (from.modifiericon() != 0) {
    _internal_set_modifiericon(from._internal_modifiericon());
  }
  if (from.integervalue2() != 0) {
    _internal_set_integervalue2(from._internal_integervalue2());
  }
  if (from.solidheaderbar() != 0) {
    _internal_set_solidheaderbar(from._internal_solidheaderbar());
  }
  if (from.inverted() != 0) {
    _internal_set_inverted(from._internal_inverted());
  }
  if (from.pairmode() != 0) {
    _internal_set_pairmode(from._internal_pairmode());
  }
}

void HWCText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCText::CopyFrom(const HWCText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCText::IsInitialized() const {
  return true;
}

void HWCText::InternalSwap(HWCText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  textline1_.Swap(&other->textline1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  textline2_.Swap(&other->textline2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCText, pairmode_)
      + sizeof(HWCText::pairmode_)
      - PROTOBUF_FIELD_OFFSET(HWCText, scale_)>(
          reinterpret_cast<char*>(&scale_),
          reinterpret_cast<char*>(&other->scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCGfx::_Internal {
 public:
};

HWCGfx::HWCGfx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCGfx)
}
HWCGfx::HWCGfx(const HWCGfx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagedata().empty()) {
    imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagedata(), 
      GetArena());
  }
  ::memcpy(&imagetype_, &from.imagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&imagetype_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCGfx)
}

void HWCGfx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HWCGfx_ibeam_2drawpanel_2eproto.base);
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&imagetype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&imagetype_)) + sizeof(y_));
}

HWCGfx::~HWCGfx() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCGfx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCGfx::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HWCGfx::ArenaDtor(void* object) {
  HWCGfx* _this = reinterpret_cast< HWCGfx* >(object);
  (void)_this;
}
void HWCGfx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCGfx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCGfx& HWCGfx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCGfx_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCGfx::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCGfx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imagedata_.ClearToEmpty();
  ::memset(&imagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&imagetype_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCGfx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.HWCGfx.ImageTypeE ImageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_imagetype(static_cast<::ibeam_rawpanel::HWCGfx_ImageTypeE>(val));
        } else goto handle_unusual;
        continue;
      // uint32 W = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 H = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool XYoffset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          xyoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 X = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ImageData = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCGfx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCGfx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.HWCGfx.ImageTypeE ImageType = 1;
  if (this->imagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_imagetype(), target);
  }

  // uint32 W = 2;
  if (this->w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_w(), target);
  }

  // uint32 H = 3;
  if (this->h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_h(), target);
  }

  // bool XYoffset = 4;
  if (this->xyoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_xyoffset(), target);
  }

  // uint32 X = 5;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_x(), target);
  }

  // uint32 Y = 6;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_y(), target);
  }

  // bytes ImageData = 16;
  if (this->imagedata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_imagedata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCGfx)
  return target;
}

size_t HWCGfx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCGfx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ImageData = 16;
  if (this->imagedata().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  // .ibeam_rawpanel.HWCGfx.ImageTypeE ImageType = 1;
  if (this->imagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imagetype());
  }

  // uint32 W = 2;
  if (this->w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_w());
  }

  // uint32 H = 3;
  if (this->h() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_h());
  }

  // bool XYoffset = 4;
  if (this->xyoffset() != 0) {
    total_size += 1 + 1;
  }

  // uint32 X = 5;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  // uint32 Y = 6;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCGfx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCGfx)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCGfx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCGfx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCGfx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCGfx)
    MergeFrom(*source);
  }
}

void HWCGfx::MergeFrom(const HWCGfx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCGfx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imagedata().size() > 0) {
    _internal_set_imagedata(from._internal_imagedata());
  }
  if (from.imagetype() != 0) {
    _internal_set_imagetype(from._internal_imagetype());
  }
  if (from.w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from.h() != 0) {
    _internal_set_h(from._internal_h());
  }
  if (from.xyoffset() != 0) {
    _internal_set_xyoffset(from._internal_xyoffset());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void HWCGfx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCGfx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCGfx::CopyFrom(const HWCGfx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCGfx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCGfx::IsInitialized() const {
  return true;
}

void HWCGfx::InternalSwap(HWCGfx* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imagedata_.Swap(&other->imagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCGfx, y_)
      + sizeof(HWCGfx::y_)
      - PROTOBUF_FIELD_OFFSET(HWCGfx, imagetype_)>(
          reinterpret_cast<char*>(&imagetype_),
          reinterpret_cast<char*>(&other->imagetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCGfx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImgConvert::_Internal {
 public:
};

ImgConvert::ImgConvert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.ImgConvert)
}
ImgConvert::ImgConvert(const ImgConvert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&filetype_, &from.filetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&grayscale_) -
    reinterpret_cast<char*>(&filetype_)) + sizeof(grayscale_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.ImgConvert)
}

void ImgConvert::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&filetype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&grayscale_) -
      reinterpret_cast<char*>(&filetype_)) + sizeof(grayscale_));
}

ImgConvert::~ImgConvert() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.ImgConvert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImgConvert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImgConvert::ArenaDtor(void* object) {
  ImgConvert* _this = reinterpret_cast< ImgConvert* >(object);
  (void)_this;
}
void ImgConvert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImgConvert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImgConvert& ImgConvert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImgConvert_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void ImgConvert::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.ImgConvert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&filetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grayscale_) -
      reinterpret_cast<char*>(&filetype_)) + sizeof(grayscale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImgConvert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.ImgConvert.FileTypeE FileType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filetype(static_cast<::ibeam_rawpanel::ImgConvert_FileTypeE>(val));
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.ImgConvert.ScalingE Scaling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scaling(static_cast<::ibeam_rawpanel::ImgConvert_ScalingE>(val));
        } else goto handle_unusual;
        continue;
      // bool Grayscale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grayscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImgConvert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.ImgConvert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.ImgConvert.FileTypeE FileType = 1;
  if (this->filetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_filetype(), target);
  }

  // .ibeam_rawpanel.ImgConvert.ScalingE Scaling = 2;
  if (this->scaling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scaling(), target);
  }

  // bool Grayscale = 3;
  if (this->grayscale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_grayscale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.ImgConvert)
  return target;
}

size_t ImgConvert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.ImgConvert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.ImgConvert.FileTypeE FileType = 1;
  if (this->filetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filetype());
  }

  // .ibeam_rawpanel.ImgConvert.ScalingE Scaling = 2;
  if (this->scaling() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scaling());
  }

  // bool Grayscale = 3;
  if (this->grayscale() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImgConvert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.ImgConvert)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgConvert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImgConvert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.ImgConvert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.ImgConvert)
    MergeFrom(*source);
  }
}

void ImgConvert::MergeFrom(const ImgConvert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.ImgConvert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filetype() != 0) {
    _internal_set_filetype(from._internal_filetype());
  }
  if (from.scaling() != 0) {
    _internal_set_scaling(from._internal_scaling());
  }
  if (from.grayscale() != 0) {
    _internal_set_grayscale(from._internal_grayscale());
  }
}

void ImgConvert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.ImgConvert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgConvert::CopyFrom(const ImgConvert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.ImgConvert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgConvert::IsInitialized() const {
  return true;
}

void ImgConvert::InternalSwap(ImgConvert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImgConvert, grayscale_)
      + sizeof(ImgConvert::grayscale_)
      - PROTOBUF_FIELD_OFFSET(ImgConvert, filetype_)>(
          reinterpret_cast<char*>(&filetype_),
          reinterpret_cast<char*>(&other->filetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImgConvert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OutboundMessage_HWCavailabilityEntry_DoNotUse::OutboundMessage_HWCavailabilityEntry_DoNotUse() {}
OutboundMessage_HWCavailabilityEntry_DoNotUse::OutboundMessage_HWCavailabilityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OutboundMessage_HWCavailabilityEntry_DoNotUse::MergeFrom(const OutboundMessage_HWCavailabilityEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OutboundMessage_HWCavailabilityEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OutboundMessage_HWCavailabilityEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class OutboundMessage::_Internal {
 public:
  static const ::ibeam_rawpanel::PanelInfo& panelinfo(const OutboundMessage* msg);
  static const ::ibeam_rawpanel::PanelTopology& paneltopology(const OutboundMessage* msg);
  static const ::ibeam_rawpanel::BurninProfile& burninprofile(const OutboundMessage* msg);
  static const ::ibeam_rawpanel::SleepTimeout& sleeptimeout(const OutboundMessage* msg);
  static const ::ibeam_rawpanel::SleepState& sleepstate(const OutboundMessage* msg);
};

const ::ibeam_rawpanel::PanelInfo&
OutboundMessage::_Internal::panelinfo(const OutboundMessage* msg) {
  return *msg->panelinfo_;
}
const ::ibeam_rawpanel::PanelTopology&
OutboundMessage::_Internal::paneltopology(const OutboundMessage* msg) {
  return *msg->paneltopology_;
}
const ::ibeam_rawpanel::BurninProfile&
OutboundMessage::_Internal::burninprofile(const OutboundMessage* msg) {
  return *msg->burninprofile_;
}
const ::ibeam_rawpanel::SleepTimeout&
OutboundMessage::_Internal::sleeptimeout(const OutboundMessage* msg) {
  return *msg->sleeptimeout_;
}
const ::ibeam_rawpanel::SleepState&
OutboundMessage::_Internal::sleepstate(const OutboundMessage* msg) {
  return *msg->sleepstate_;
}
OutboundMessage::OutboundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hwcavailability_(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.OutboundMessage)
}
OutboundMessage::OutboundMessage(const OutboundMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hwcavailability_.MergeFrom(from.hwcavailability_);
  if (from._internal_has_panelinfo()) {
    panelinfo_ = new ::ibeam_rawpanel::PanelInfo(*from.panelinfo_);
  } else {
    panelinfo_ = nullptr;
  }
  if (from._internal_has_paneltopology()) {
    paneltopology_ = new ::ibeam_rawpanel::PanelTopology(*from.paneltopology_);
  } else {
    paneltopology_ = nullptr;
  }
  if (from._internal_has_sleeptimeout()) {
    sleeptimeout_ = new ::ibeam_rawpanel::SleepTimeout(*from.sleeptimeout_);
  } else {
    sleeptimeout_ = nullptr;
  }
  if (from._internal_has_sleepstate()) {
    sleepstate_ = new ::ibeam_rawpanel::SleepState(*from.sleepstate_);
  } else {
    sleepstate_ = nullptr;
  }
  if (from._internal_has_burninprofile()) {
    burninprofile_ = new ::ibeam_rawpanel::BurninProfile(*from.burninprofile_);
  } else {
    burninprofile_ = nullptr;
  }
  flowmessage_ = from.flowmessage_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.OutboundMessage)
}

void OutboundMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutboundMessage_ibeam_2drawpanel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&panelinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flowmessage_) -
      reinterpret_cast<char*>(&panelinfo_)) + sizeof(flowmessage_));
}

OutboundMessage::~OutboundMessage() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.OutboundMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutboundMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete panelinfo_;
  if (this != internal_default_instance()) delete paneltopology_;
  if (this != internal_default_instance()) delete sleeptimeout_;
  if (this != internal_default_instance()) delete sleepstate_;
  if (this != internal_default_instance()) delete burninprofile_;
}

void OutboundMessage::ArenaDtor(void* object) {
  OutboundMessage* _this = reinterpret_cast< OutboundMessage* >(object);
  (void)_this;
}
void OutboundMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutboundMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutboundMessage& OutboundMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutboundMessage_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void OutboundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.OutboundMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hwcavailability_.Clear();
  events_.Clear();
  if (GetArena() == nullptr && panelinfo_ != nullptr) {
    delete panelinfo_;
  }
  panelinfo_ = nullptr;
  if (GetArena() == nullptr && paneltopology_ != nullptr) {
    delete paneltopology_;
  }
  paneltopology_ = nullptr;
  if (GetArena() == nullptr && sleeptimeout_ != nullptr) {
    delete sleeptimeout_;
  }
  sleeptimeout_ = nullptr;
  if (GetArena() == nullptr && sleepstate_ != nullptr) {
    delete sleepstate_;
  }
  sleepstate_ = nullptr;
  if (GetArena() == nullptr && burninprofile_ != nullptr) {
    delete burninprofile_;
  }
  burninprofile_ = nullptr;
  flowmessage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutboundMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ibeam_rawpanel.OutboundMessage.FlowMsg FlowMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flowmessage(static_cast<::ibeam_rawpanel::OutboundMessage_FlowMsg>(val));
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> HWCavailability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&hwcavailability_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.PanelInfo PanelInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_panelinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.PanelTopology PanelTopology = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_paneltopology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.SleepTimeout SleepTimeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sleeptimeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.SleepState SleepState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sleepstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ibeam_rawpanel.HWCEvent Events = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.BurninProfile BurninProfile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_burninprofile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutboundMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.OutboundMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibeam_rawpanel.OutboundMessage.FlowMsg FlowMessage = 1;
  if (this->flowmessage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flowmessage(), target);
  }

  // map<uint32, uint32> HWCavailability = 2;
  if (!this->_internal_hwcavailability().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_hwcavailability().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_hwcavailability().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_hwcavailability().begin();
          it != this->_internal_hwcavailability().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OutboundMessage_HWCavailabilityEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_hwcavailability().begin();
          it != this->_internal_hwcavailability().end(); ++it) {
        target = OutboundMessage_HWCavailabilityEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // .ibeam_rawpanel.PanelInfo PanelInfo = 4;
  if (this->has_panelinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::panelinfo(this), target, stream);
  }

  // .ibeam_rawpanel.PanelTopology PanelTopology = 5;
  if (this->has_paneltopology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::paneltopology(this), target, stream);
  }

  // .ibeam_rawpanel.SleepTimeout SleepTimeout = 6;
  if (this->has_sleeptimeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sleeptimeout(this), target, stream);
  }

  // .ibeam_rawpanel.SleepState SleepState = 7;
  if (this->has_sleepstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sleepstate(this), target, stream);
  }

  // repeated .ibeam_rawpanel.HWCEvent Events = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_events(i), target, stream);
  }

  // .ibeam_rawpanel.BurninProfile BurninProfile = 9;
  if (this->has_burninprofile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::burninprofile(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.OutboundMessage)
  return target;
}

size_t OutboundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.OutboundMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> HWCavailability = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hwcavailability_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_hwcavailability().begin();
      it != this->_internal_hwcavailability().end(); ++it) {
    total_size += OutboundMessage_HWCavailabilityEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .ibeam_rawpanel.HWCEvent Events = 8;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ibeam_rawpanel.PanelInfo PanelInfo = 4;
  if (this->has_panelinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *panelinfo_);
  }

  // .ibeam_rawpanel.PanelTopology PanelTopology = 5;
  if (this->has_paneltopology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paneltopology_);
  }

  // .ibeam_rawpanel.SleepTimeout SleepTimeout = 6;
  if (this->has_sleeptimeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sleeptimeout_);
  }

  // .ibeam_rawpanel.SleepState SleepState = 7;
  if (this->has_sleepstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sleepstate_);
  }

  // .ibeam_rawpanel.BurninProfile BurninProfile = 9;
  if (this->has_burninprofile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *burninprofile_);
  }

  // .ibeam_rawpanel.OutboundMessage.FlowMsg FlowMessage = 1;
  if (this->flowmessage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flowmessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutboundMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.OutboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const OutboundMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutboundMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.OutboundMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.OutboundMessage)
    MergeFrom(*source);
  }
}

void OutboundMessage::MergeFrom(const OutboundMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.OutboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hwcavailability_.MergeFrom(from.hwcavailability_);
  events_.MergeFrom(from.events_);
  if (from.has_panelinfo()) {
    _internal_mutable_panelinfo()->::ibeam_rawpanel::PanelInfo::MergeFrom(from._internal_panelinfo());
  }
  if (from.has_paneltopology()) {
    _internal_mutable_paneltopology()->::ibeam_rawpanel::PanelTopology::MergeFrom(from._internal_paneltopology());
  }
  if (from.has_sleeptimeout()) {
    _internal_mutable_sleeptimeout()->::ibeam_rawpanel::SleepTimeout::MergeFrom(from._internal_sleeptimeout());
  }
  if (from.has_sleepstate()) {
    _internal_mutable_sleepstate()->::ibeam_rawpanel::SleepState::MergeFrom(from._internal_sleepstate());
  }
  if (from.has_burninprofile()) {
    _internal_mutable_burninprofile()->::ibeam_rawpanel::BurninProfile::MergeFrom(from._internal_burninprofile());
  }
  if (from.flowmessage() != 0) {
    _internal_set_flowmessage(from._internal_flowmessage());
  }
}

void OutboundMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.OutboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutboundMessage::CopyFrom(const OutboundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.OutboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundMessage::IsInitialized() const {
  return true;
}

void OutboundMessage::InternalSwap(OutboundMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hwcavailability_.Swap(&other->hwcavailability_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutboundMessage, flowmessage_)
      + sizeof(OutboundMessage::flowmessage_)
      - PROTOBUF_FIELD_OFFSET(OutboundMessage, panelinfo_)>(
          reinterpret_cast<char*>(&panelinfo_),
          reinterpret_cast<char*>(&other->panelinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutboundMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SleepState::_Internal {
 public:
};

SleepState::SleepState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.SleepState)
}
SleepState::SleepState(const SleepState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  issleeping_ = from.issleeping_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.SleepState)
}

void SleepState::SharedCtor() {
  issleeping_ = false;
}

SleepState::~SleepState() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.SleepState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SleepState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SleepState::ArenaDtor(void* object) {
  SleepState* _this = reinterpret_cast< SleepState* >(object);
  (void)_this;
}
void SleepState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SleepState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SleepState& SleepState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SleepState_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void SleepState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.SleepState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  issleeping_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SleepState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool IsSleeping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issleeping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SleepState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.SleepState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsSleeping = 1;
  if (this->issleeping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_issleeping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.SleepState)
  return target;
}

size_t SleepState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.SleepState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsSleeping = 1;
  if (this->issleeping() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SleepState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.SleepState)
  GOOGLE_DCHECK_NE(&from, this);
  const SleepState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SleepState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.SleepState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.SleepState)
    MergeFrom(*source);
  }
}

void SleepState::MergeFrom(const SleepState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.SleepState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.issleeping() != 0) {
    _internal_set_issleeping(from._internal_issleeping());
  }
}

void SleepState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.SleepState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SleepState::CopyFrom(const SleepState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.SleepState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SleepState::IsInitialized() const {
  return true;
}

void SleepState::InternalSwap(SleepState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(issleeping_, other->issleeping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SleepState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HWCEvent::_Internal {
 public:
  static const ::ibeam_rawpanel::BinaryEvent& binary(const HWCEvent* msg);
  static const ::ibeam_rawpanel::PulsedEvent& pulsed(const HWCEvent* msg);
  static const ::ibeam_rawpanel::AbsoluteEvent& absolute(const HWCEvent* msg);
  static const ::ibeam_rawpanel::SpeedEvent& speed(const HWCEvent* msg);
  static const ::ibeam_rawpanel::RawAnalogEvent& rawanalog(const HWCEvent* msg);
  static const ::ibeam_rawpanel::SystemStat& sysstat(const HWCEvent* msg);
};

const ::ibeam_rawpanel::BinaryEvent&
HWCEvent::_Internal::binary(const HWCEvent* msg) {
  return *msg->binary_;
}
const ::ibeam_rawpanel::PulsedEvent&
HWCEvent::_Internal::pulsed(const HWCEvent* msg) {
  return *msg->pulsed_;
}
const ::ibeam_rawpanel::AbsoluteEvent&
HWCEvent::_Internal::absolute(const HWCEvent* msg) {
  return *msg->absolute_;
}
const ::ibeam_rawpanel::SpeedEvent&
HWCEvent::_Internal::speed(const HWCEvent* msg) {
  return *msg->speed_;
}
const ::ibeam_rawpanel::RawAnalogEvent&
HWCEvent::_Internal::rawanalog(const HWCEvent* msg) {
  return *msg->rawanalog_;
}
const ::ibeam_rawpanel::SystemStat&
HWCEvent::_Internal::sysstat(const HWCEvent* msg) {
  return *msg->sysstat_;
}
HWCEvent::HWCEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.HWCEvent)
}
HWCEvent::HWCEvent(const HWCEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_binary()) {
    binary_ = new ::ibeam_rawpanel::BinaryEvent(*from.binary_);
  } else {
    binary_ = nullptr;
  }
  if (from._internal_has_pulsed()) {
    pulsed_ = new ::ibeam_rawpanel::PulsedEvent(*from.pulsed_);
  } else {
    pulsed_ = nullptr;
  }
  if (from._internal_has_absolute()) {
    absolute_ = new ::ibeam_rawpanel::AbsoluteEvent(*from.absolute_);
  } else {
    absolute_ = nullptr;
  }
  if (from._internal_has_speed()) {
    speed_ = new ::ibeam_rawpanel::SpeedEvent(*from.speed_);
  } else {
    speed_ = nullptr;
  }
  if (from._internal_has_rawanalog()) {
    rawanalog_ = new ::ibeam_rawpanel::RawAnalogEvent(*from.rawanalog_);
  } else {
    rawanalog_ = nullptr;
  }
  if (from._internal_has_sysstat()) {
    sysstat_ = new ::ibeam_rawpanel::SystemStat(*from.sysstat_);
  } else {
    sysstat_ = nullptr;
  }
  ::memcpy(&hwcid_, &from.hwcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&hwcid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.HWCEvent)
}

void HWCEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HWCEvent_ibeam_2drawpanel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&binary_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&binary_)) + sizeof(timestamp_));
}

HWCEvent::~HWCEvent() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.HWCEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HWCEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete binary_;
  if (this != internal_default_instance()) delete pulsed_;
  if (this != internal_default_instance()) delete absolute_;
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete rawanalog_;
  if (this != internal_default_instance()) delete sysstat_;
}

void HWCEvent::ArenaDtor(void* object) {
  HWCEvent* _this = reinterpret_cast< HWCEvent* >(object);
  (void)_this;
}
void HWCEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HWCEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HWCEvent& HWCEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HWCEvent_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void HWCEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.HWCEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && binary_ != nullptr) {
    delete binary_;
  }
  binary_ = nullptr;
  if (GetArena() == nullptr && pulsed_ != nullptr) {
    delete pulsed_;
  }
  pulsed_ = nullptr;
  if (GetArena() == nullptr && absolute_ != nullptr) {
    delete absolute_;
  }
  absolute_ = nullptr;
  if (GetArena() == nullptr && speed_ != nullptr) {
    delete speed_;
  }
  speed_ = nullptr;
  if (GetArena() == nullptr && rawanalog_ != nullptr) {
    delete rawanalog_;
  }
  rawanalog_ = nullptr;
  if (GetArena() == nullptr && sysstat_ != nullptr) {
    delete sysstat_;
  }
  sysstat_ = nullptr;
  ::memset(&hwcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&hwcid_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWCEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 HWCID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hwcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.BinaryEvent Binary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.PulsedEvent Pulsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulsed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.AbsoluteEvent Absolute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.SpeedEvent Speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.RawAnalogEvent RawAnalog = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rawanalog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.SystemStat SysStat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sysstat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HWCEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.HWCEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 HWCID = 1;
  if (this->hwcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hwcid(), target);
  }

  // .ibeam_rawpanel.BinaryEvent Binary = 2;
  if (this->has_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::binary(this), target, stream);
  }

  // .ibeam_rawpanel.PulsedEvent Pulsed = 3;
  if (this->has_pulsed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pulsed(this), target, stream);
  }

  // .ibeam_rawpanel.AbsoluteEvent Absolute = 4;
  if (this->has_absolute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::absolute(this), target, stream);
  }

  // .ibeam_rawpanel.SpeedEvent Speed = 5;
  if (this->has_speed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::speed(this), target, stream);
  }

  // uint32 Timestamp = 6;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timestamp(), target);
  }

  // .ibeam_rawpanel.RawAnalogEvent RawAnalog = 7;
  if (this->has_rawanalog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rawanalog(this), target, stream);
  }

  // .ibeam_rawpanel.SystemStat SysStat = 8;
  if (this->has_sysstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sysstat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.HWCEvent)
  return target;
}

size_t HWCEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.HWCEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibeam_rawpanel.BinaryEvent Binary = 2;
  if (this->has_binary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *binary_);
  }

  // .ibeam_rawpanel.PulsedEvent Pulsed = 3;
  if (this->has_pulsed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulsed_);
  }

  // .ibeam_rawpanel.AbsoluteEvent Absolute = 4;
  if (this->has_absolute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *absolute_);
  }

  // .ibeam_rawpanel.SpeedEvent Speed = 5;
  if (this->has_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_);
  }

  // .ibeam_rawpanel.RawAnalogEvent RawAnalog = 7;
  if (this->has_rawanalog()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rawanalog_);
  }

  // .ibeam_rawpanel.SystemStat SysStat = 8;
  if (this->has_sysstat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sysstat_);
  }

  // uint32 HWCID = 1;
  if (this->hwcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hwcid());
  }

  // uint32 Timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HWCEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.HWCEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const HWCEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HWCEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.HWCEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.HWCEvent)
    MergeFrom(*source);
  }
}

void HWCEvent::MergeFrom(const HWCEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.HWCEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_binary()) {
    _internal_mutable_binary()->::ibeam_rawpanel::BinaryEvent::MergeFrom(from._internal_binary());
  }
  if (from.has_pulsed()) {
    _internal_mutable_pulsed()->::ibeam_rawpanel::PulsedEvent::MergeFrom(from._internal_pulsed());
  }
  if (from.has_absolute()) {
    _internal_mutable_absolute()->::ibeam_rawpanel::AbsoluteEvent::MergeFrom(from._internal_absolute());
  }
  if (from.has_speed()) {
    _internal_mutable_speed()->::ibeam_rawpanel::SpeedEvent::MergeFrom(from._internal_speed());
  }
  if (from.has_rawanalog()) {
    _internal_mutable_rawanalog()->::ibeam_rawpanel::RawAnalogEvent::MergeFrom(from._internal_rawanalog());
  }
  if (from.has_sysstat()) {
    _internal_mutable_sysstat()->::ibeam_rawpanel::SystemStat::MergeFrom(from._internal_sysstat());
  }
  if (from.hwcid() != 0) {
    _internal_set_hwcid(from._internal_hwcid());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void HWCEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.HWCEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWCEvent::CopyFrom(const HWCEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.HWCEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWCEvent::IsInitialized() const {
  return true;
}

void HWCEvent::InternalSwap(HWCEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWCEvent, timestamp_)
      + sizeof(HWCEvent::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HWCEvent, binary_)>(
          reinterpret_cast<char*>(&binary_),
          reinterpret_cast<char*>(&other->binary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWCEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BinaryEvent::_Internal {
 public:
};

BinaryEvent::BinaryEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.BinaryEvent)
}
BinaryEvent::BinaryEvent(const BinaryEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pressed_, &from.pressed_,
    static_cast<size_t>(reinterpret_cast<char*>(&edge_) -
    reinterpret_cast<char*>(&pressed_)) + sizeof(edge_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.BinaryEvent)
}

void BinaryEvent::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pressed_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&edge_) -
      reinterpret_cast<char*>(&pressed_)) + sizeof(edge_));
}

BinaryEvent::~BinaryEvent() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.BinaryEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BinaryEvent::ArenaDtor(void* object) {
  BinaryEvent* _this = reinterpret_cast< BinaryEvent* >(object);
  (void)_this;
}
void BinaryEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryEvent& BinaryEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryEvent_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void BinaryEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.BinaryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pressed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_) -
      reinterpret_cast<char*>(&pressed_)) + sizeof(edge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Pressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ibeam_rawpanel.BinaryEvent.EdgeID Edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge(static_cast<::ibeam_rawpanel::BinaryEvent_EdgeID>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.BinaryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Pressed = 1;
  if (this->pressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_pressed(), target);
  }

  // .ibeam_rawpanel.BinaryEvent.EdgeID Edge = 2;
  if (this->edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_edge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.BinaryEvent)
  return target;
}

size_t BinaryEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.BinaryEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Pressed = 1;
  if (this->pressed() != 0) {
    total_size += 1 + 1;
  }

  // .ibeam_rawpanel.BinaryEvent.EdgeID Edge = 2;
  if (this->edge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_edge());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.BinaryEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.BinaryEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.BinaryEvent)
    MergeFrom(*source);
  }
}

void BinaryEvent::MergeFrom(const BinaryEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.BinaryEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pressed() != 0) {
    _internal_set_pressed(from._internal_pressed());
  }
  if (from.edge() != 0) {
    _internal_set_edge(from._internal_edge());
  }
}

void BinaryEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.BinaryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryEvent::CopyFrom(const BinaryEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.BinaryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryEvent::IsInitialized() const {
  return true;
}

void BinaryEvent::InternalSwap(BinaryEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryEvent, edge_)
      + sizeof(BinaryEvent::edge_)
      - PROTOBUF_FIELD_OFFSET(BinaryEvent, pressed_)>(
          reinterpret_cast<char*>(&pressed_),
          reinterpret_cast<char*>(&other->pressed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PulsedEvent::_Internal {
 public:
};

PulsedEvent::PulsedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.PulsedEvent)
}
PulsedEvent::PulsedEvent(const PulsedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.PulsedEvent)
}

void PulsedEvent::SharedCtor() {
  value_ = 0;
}

PulsedEvent::~PulsedEvent() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.PulsedEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulsedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PulsedEvent::ArenaDtor(void* object) {
  PulsedEvent* _this = reinterpret_cast< PulsedEvent* >(object);
  (void)_this;
}
void PulsedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulsedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulsedEvent& PulsedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulsedEvent_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void PulsedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.PulsedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulsedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulsedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.PulsedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 Value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.PulsedEvent)
  return target;
}

size_t PulsedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.PulsedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 Value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulsedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.PulsedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PulsedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulsedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.PulsedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.PulsedEvent)
    MergeFrom(*source);
  }
}

void PulsedEvent::MergeFrom(const PulsedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.PulsedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void PulsedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.PulsedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulsedEvent::CopyFrom(const PulsedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.PulsedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulsedEvent::IsInitialized() const {
  return true;
}

void PulsedEvent::InternalSwap(PulsedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PulsedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AbsoluteEvent::_Internal {
 public:
};

AbsoluteEvent::AbsoluteEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.AbsoluteEvent)
}
AbsoluteEvent::AbsoluteEvent(const AbsoluteEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.AbsoluteEvent)
}

void AbsoluteEvent::SharedCtor() {
  value_ = 0u;
}

AbsoluteEvent::~AbsoluteEvent() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.AbsoluteEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbsoluteEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AbsoluteEvent::ArenaDtor(void* object) {
  AbsoluteEvent* _this = reinterpret_cast< AbsoluteEvent* >(object);
  (void)_this;
}
void AbsoluteEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbsoluteEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbsoluteEvent& AbsoluteEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbsoluteEvent_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void AbsoluteEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.AbsoluteEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbsoluteEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbsoluteEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.AbsoluteEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.AbsoluteEvent)
  return target;
}

size_t AbsoluteEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.AbsoluteEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbsoluteEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.AbsoluteEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AbsoluteEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbsoluteEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.AbsoluteEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.AbsoluteEvent)
    MergeFrom(*source);
  }
}

void AbsoluteEvent::MergeFrom(const AbsoluteEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.AbsoluteEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void AbsoluteEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.AbsoluteEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsoluteEvent::CopyFrom(const AbsoluteEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.AbsoluteEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsoluteEvent::IsInitialized() const {
  return true;
}

void AbsoluteEvent::InternalSwap(AbsoluteEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbsoluteEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpeedEvent::_Internal {
 public:
};

SpeedEvent::SpeedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.SpeedEvent)
}
SpeedEvent::SpeedEvent(const SpeedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.SpeedEvent)
}

void SpeedEvent::SharedCtor() {
  value_ = 0;
}

SpeedEvent::~SpeedEvent() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.SpeedEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeedEvent::ArenaDtor(void* object) {
  SpeedEvent* _this = reinterpret_cast< SpeedEvent* >(object);
  (void)_this;
}
void SpeedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedEvent& SpeedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedEvent_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void SpeedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.SpeedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.SpeedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 Value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.SpeedEvent)
  return target;
}

size_t SpeedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.SpeedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 Value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.SpeedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.SpeedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.SpeedEvent)
    MergeFrom(*source);
  }
}

void SpeedEvent::MergeFrom(const SpeedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.SpeedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SpeedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.SpeedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedEvent::CopyFrom(const SpeedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.SpeedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedEvent::IsInitialized() const {
  return true;
}

void SpeedEvent::InternalSwap(SpeedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawAnalogEvent::_Internal {
 public:
};

RawAnalogEvent::RawAnalogEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.RawAnalogEvent)
}
RawAnalogEvent::RawAnalogEvent(const RawAnalogEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.RawAnalogEvent)
}

void RawAnalogEvent::SharedCtor() {
  value_ = 0u;
}

RawAnalogEvent::~RawAnalogEvent() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.RawAnalogEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawAnalogEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RawAnalogEvent::ArenaDtor(void* object) {
  RawAnalogEvent* _this = reinterpret_cast< RawAnalogEvent* >(object);
  (void)_this;
}
void RawAnalogEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawAnalogEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawAnalogEvent& RawAnalogEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawAnalogEvent_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void RawAnalogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.RawAnalogEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawAnalogEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawAnalogEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.RawAnalogEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.RawAnalogEvent)
  return target;
}

size_t RawAnalogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.RawAnalogEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawAnalogEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.RawAnalogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RawAnalogEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawAnalogEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.RawAnalogEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.RawAnalogEvent)
    MergeFrom(*source);
  }
}

void RawAnalogEvent::MergeFrom(const RawAnalogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.RawAnalogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void RawAnalogEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.RawAnalogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawAnalogEvent::CopyFrom(const RawAnalogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.RawAnalogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawAnalogEvent::IsInitialized() const {
  return true;
}

void RawAnalogEvent::InternalSwap(RawAnalogEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawAnalogEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SystemStat::_Internal {
 public:
};

SystemStat::SystemStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.SystemStat)
}
SystemStat::SystemStat(const SystemStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cpuusage_, &from.cpuusage_,
    static_cast<size_t>(reinterpret_cast<char*>(&exttemp_) -
    reinterpret_cast<char*>(&cpuusage_)) + sizeof(exttemp_));
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.SystemStat)
}

void SystemStat::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cpuusage_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&exttemp_) -
      reinterpret_cast<char*>(&cpuusage_)) + sizeof(exttemp_));
}

SystemStat::~SystemStat() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.SystemStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SystemStat::ArenaDtor(void* object) {
  SystemStat* _this = reinterpret_cast< SystemStat* >(object);
  (void)_this;
}
void SystemStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemStat& SystemStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemStat_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void SystemStat::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.SystemStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cpuusage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exttemp_) -
      reinterpret_cast<char*>(&cpuusage_)) + sizeof(exttemp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 CPUUsage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cpuusage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float CPUTemp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          cputemp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ExtTemp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          exttemp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.SystemStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 CPUUsage = 1;
  if (this->cpuusage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cpuusage(), target);
  }

  // float CPUTemp = 2;
  if (!(this->cputemp() <= 0 && this->cputemp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_cputemp(), target);
  }

  // float ExtTemp = 3;
  if (!(this->exttemp() <= 0 && this->exttemp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_exttemp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.SystemStat)
  return target;
}

size_t SystemStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.SystemStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 CPUUsage = 1;
  if (this->cpuusage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cpuusage());
  }

  // float CPUTemp = 2;
  if (!(this->cputemp() <= 0 && this->cputemp() >= 0)) {
    total_size += 1 + 4;
  }

  // float ExtTemp = 3;
  if (!(this->exttemp() <= 0 && this->exttemp() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.SystemStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.SystemStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.SystemStat)
    MergeFrom(*source);
  }
}

void SystemStat::MergeFrom(const SystemStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.SystemStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cpuusage() != 0) {
    _internal_set_cpuusage(from._internal_cpuusage());
  }
  if (!(from.cputemp() <= 0 && from.cputemp() >= 0)) {
    _internal_set_cputemp(from._internal_cputemp());
  }
  if (!(from.exttemp() <= 0 && from.exttemp() >= 0)) {
    _internal_set_exttemp(from._internal_exttemp());
  }
}

void SystemStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.SystemStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStat::CopyFrom(const SystemStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.SystemStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStat::IsInitialized() const {
  return true;
}

void SystemStat::InternalSwap(SystemStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemStat, exttemp_)
      + sizeof(SystemStat::exttemp_)
      - PROTOBUF_FIELD_OFFSET(SystemStat, cpuusage_)>(
          reinterpret_cast<char*>(&cpuusage_),
          reinterpret_cast<char*>(&other->cpuusage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PanelInfo::_Internal {
 public:
};

PanelInfo::PanelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.PanelInfo)
}
PanelInfo::PanelInfo(const PanelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serial().empty()) {
    serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  softwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_softwareversion().empty()) {
    softwareversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_softwareversion(), 
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.PanelInfo)
}

void PanelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PanelInfo_ibeam_2drawpanel_2eproto.base);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PanelInfo::~PanelInfo() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.PanelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PanelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softwareversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PanelInfo::ArenaDtor(void* object) {
  PanelInfo* _this = reinterpret_cast< PanelInfo* >(object);
  (void)_this;
}
void PanelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PanelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PanelInfo& PanelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PanelInfo_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void PanelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.PanelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmpty();
  serial_.ClearToEmpty();
  name_.ClearToEmpty();
  softwareversion_.ClearToEmpty();
  platform_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PanelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.PanelInfo.Model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Serial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.PanelInfo.Serial"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.PanelInfo.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SoftwareVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_softwareversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.PanelInfo.SoftwareVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.PanelInfo.Platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PanelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.PanelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Model = 1;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.PanelInfo.Model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string Serial = 2;
  if (this->serial().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.PanelInfo.Serial");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serial(), target);
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.PanelInfo.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string SoftwareVersion = 4;
  if (this->softwareversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_softwareversion().data(), static_cast<int>(this->_internal_softwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.PanelInfo.SoftwareVersion");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_softwareversion(), target);
  }

  // string Platform = 5;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.PanelInfo.Platform");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.PanelInfo)
  return target;
}

size_t PanelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.PanelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string Serial = 2;
  if (this->serial().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial());
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string SoftwareVersion = 4;
  if (this->softwareversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_softwareversion());
  }

  // string Platform = 5;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PanelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.PanelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PanelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PanelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.PanelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.PanelInfo)
    MergeFrom(*source);
  }
}

void PanelInfo::MergeFrom(const PanelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.PanelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
  if (from.serial().size() > 0) {
    _internal_set_serial(from._internal_serial());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.softwareversion().size() > 0) {
    _internal_set_softwareversion(from._internal_softwareversion());
  }
  if (from.platform().size() > 0) {
    _internal_set_platform(from._internal_platform());
  }
}

void PanelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.PanelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanelInfo::CopyFrom(const PanelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.PanelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanelInfo::IsInitialized() const {
  return true;
}

void PanelInfo::InternalSwap(PanelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serial_.Swap(&other->serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  softwareversion_.Swap(&other->softwareversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PanelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PanelTopology::_Internal {
 public:
};

PanelTopology::PanelTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.PanelTopology)
}
PanelTopology::PanelTopology(const PanelTopology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  svgbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_svgbase().empty()) {
    svgbase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_svgbase(), 
      GetArena());
  }
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json().empty()) {
    json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.PanelTopology)
}

void PanelTopology::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PanelTopology_ibeam_2drawpanel_2eproto.base);
  svgbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PanelTopology::~PanelTopology() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.PanelTopology)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PanelTopology::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  svgbase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PanelTopology::ArenaDtor(void* object) {
  PanelTopology* _this = reinterpret_cast< PanelTopology* >(object);
  (void)_this;
}
void PanelTopology::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PanelTopology::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PanelTopology& PanelTopology::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PanelTopology_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void PanelTopology::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.PanelTopology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svgbase_.ClearToEmpty();
  json_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PanelTopology::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Svgbase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_svgbase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.PanelTopology.Svgbase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Json = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.PanelTopology.Json"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PanelTopology::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.PanelTopology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Svgbase = 1;
  if (this->svgbase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_svgbase().data(), static_cast<int>(this->_internal_svgbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.PanelTopology.Svgbase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_svgbase(), target);
  }

  // string Json = 2;
  if (this->json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.PanelTopology.Json");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.PanelTopology)
  return target;
}

size_t PanelTopology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.PanelTopology)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Svgbase = 1;
  if (this->svgbase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_svgbase());
  }

  // string Json = 2;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PanelTopology::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.PanelTopology)
  GOOGLE_DCHECK_NE(&from, this);
  const PanelTopology* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PanelTopology>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.PanelTopology)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.PanelTopology)
    MergeFrom(*source);
  }
}

void PanelTopology::MergeFrom(const PanelTopology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.PanelTopology)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svgbase().size() > 0) {
    _internal_set_svgbase(from._internal_svgbase());
  }
  if (from.json().size() > 0) {
    _internal_set_json(from._internal_json());
  }
}

void PanelTopology::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.PanelTopology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanelTopology::CopyFrom(const PanelTopology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.PanelTopology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanelTopology::IsInitialized() const {
  return true;
}

void PanelTopology::InternalSwap(PanelTopology* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  svgbase_.Swap(&other->svgbase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_.Swap(&other->json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PanelTopology::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BurninProfile::_Internal {
 public:
};

BurninProfile::BurninProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibeam_rawpanel.BurninProfile)
}
BurninProfile::BurninProfile(const BurninProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json().empty()) {
    json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ibeam_rawpanel.BurninProfile)
}

void BurninProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BurninProfile_ibeam_2drawpanel_2eproto.base);
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BurninProfile::~BurninProfile() {
  // @@protoc_insertion_point(destructor:ibeam_rawpanel.BurninProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BurninProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BurninProfile::ArenaDtor(void* object) {
  BurninProfile* _this = reinterpret_cast< BurninProfile* >(object);
  (void)_this;
}
void BurninProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BurninProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BurninProfile& BurninProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BurninProfile_ibeam_2drawpanel_2eproto.base);
  return *internal_default_instance();
}


void BurninProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:ibeam_rawpanel.BurninProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BurninProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibeam_rawpanel.BurninProfile.Json"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BurninProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibeam_rawpanel.BurninProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Json = 1;
  if (this->json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibeam_rawpanel.BurninProfile.Json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibeam_rawpanel.BurninProfile)
  return target;
}

size_t BurninProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibeam_rawpanel.BurninProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BurninProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ibeam_rawpanel.BurninProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const BurninProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BurninProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ibeam_rawpanel.BurninProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ibeam_rawpanel.BurninProfile)
    MergeFrom(*source);
  }
}

void BurninProfile::MergeFrom(const BurninProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibeam_rawpanel.BurninProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json().size() > 0) {
    _internal_set_json(from._internal_json());
  }
}

void BurninProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ibeam_rawpanel.BurninProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurninProfile::CopyFrom(const BurninProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibeam_rawpanel.BurninProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurninProfile::IsInitialized() const {
  return true;
}

void BurninProfile::InternalSwap(BurninProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  json_.Swap(&other->json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BurninProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ibeam_rawpanel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::InboundMessage* Arena::CreateMaybeMessage< ::ibeam_rawpanel::InboundMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::InboundMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::Command* Arena::CreateMaybeMessage< ::ibeam_rawpanel::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::SleepTimeout* Arena::CreateMaybeMessage< ::ibeam_rawpanel::SleepTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::SleepTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::WebserverState* Arena::CreateMaybeMessage< ::ibeam_rawpanel::WebserverState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::WebserverState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::Brightness* Arena::CreateMaybeMessage< ::ibeam_rawpanel::Brightness >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::Brightness >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::PublishSystemStat* Arena::CreateMaybeMessage< ::ibeam_rawpanel::PublishSystemStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::PublishSystemStat >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCState* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::PublishRawADCValues* Arena::CreateMaybeMessage< ::ibeam_rawpanel::PublishRawADCValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::PublishRawADCValues >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCMode* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCMode >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCExtended* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCColor* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCColor >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::Color* Arena::CreateMaybeMessage< ::ibeam_rawpanel::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::ColorRGB* Arena::CreateMaybeMessage< ::ibeam_rawpanel::ColorRGB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::ColorRGB >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::ColorIndex* Arena::CreateMaybeMessage< ::ibeam_rawpanel::ColorIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::ColorIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCText_ScaleM* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCText_ScaleM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCText_ScaleM >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCText_TextStyle_Font* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCText_TextStyle_Font >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCText_TextStyle_Font >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCText_TextStyle* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCText_TextStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCText_TextStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCText* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCText >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCGfx* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCGfx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCGfx >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::ImgConvert* Arena::CreateMaybeMessage< ::ibeam_rawpanel::ImgConvert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::ImgConvert >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse* Arena::CreateMaybeMessage< ::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::OutboundMessage_HWCavailabilityEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::OutboundMessage* Arena::CreateMaybeMessage< ::ibeam_rawpanel::OutboundMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::OutboundMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::SleepState* Arena::CreateMaybeMessage< ::ibeam_rawpanel::SleepState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::SleepState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::HWCEvent* Arena::CreateMaybeMessage< ::ibeam_rawpanel::HWCEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::HWCEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::BinaryEvent* Arena::CreateMaybeMessage< ::ibeam_rawpanel::BinaryEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::BinaryEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::PulsedEvent* Arena::CreateMaybeMessage< ::ibeam_rawpanel::PulsedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::PulsedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::AbsoluteEvent* Arena::CreateMaybeMessage< ::ibeam_rawpanel::AbsoluteEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::AbsoluteEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::SpeedEvent* Arena::CreateMaybeMessage< ::ibeam_rawpanel::SpeedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::SpeedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::RawAnalogEvent* Arena::CreateMaybeMessage< ::ibeam_rawpanel::RawAnalogEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::RawAnalogEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::SystemStat* Arena::CreateMaybeMessage< ::ibeam_rawpanel::SystemStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::SystemStat >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::PanelInfo* Arena::CreateMaybeMessage< ::ibeam_rawpanel::PanelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::PanelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::PanelTopology* Arena::CreateMaybeMessage< ::ibeam_rawpanel::PanelTopology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::PanelTopology >(arena);
}
template<> PROTOBUF_NOINLINE ::ibeam_rawpanel::BurninProfile* Arena::CreateMaybeMessage< ::ibeam_rawpanel::BurninProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibeam_rawpanel::BurninProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
